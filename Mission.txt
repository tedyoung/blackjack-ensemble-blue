Mission Ideas
-------------

# FEATURE IN-PROGRESS

[ ] Multiple players for the one ongoing game - DOMAIN


NEXT TASKS:

    [X] GameView: refactor stringListOf() to be a function to transform List<Card> to List<String>
        (instead of the currently confusing accumulating parameter)

    [X] Finish moving player-related functionality from Game (and elsewhere) into Player class

        [X] In-progress: get rid of Player.getPlayerHand() by:

            [X] Finding and getting rid of Game.playerHand() usages
            [X] Push Game.playerCards() to Player.cards()
            [X] playerHand.value() needs to move to Player class

            [X] Cleanup: make methods public/private as appropriate

    [ ] Shift language from game-oriented to player-oriented

        [ ] Consider isGameOver vs. isPlayerDone (once there are multiple players)
            [X] requireGameIsOver -> requirePlayerIsDone
-->         [ ] Rename updateGameDoneState() to be updatePlayerDoneState()

        [ ] GameOutcome vs PlayerOutcome

-->         [ ] Outcome method belongs to Player

        [X] Move "isPlayerDone" state from the Game class to Player

--> [ ] Fix Feature Envy of change in "player done" state upon card dealt and player stands

            [ ] Game#playerStands() -- move feature envy code to Player

            [ ] Game#playerHits() -- move feature envy code to Player


FUTURE TASKS:

    [ ] Player joins Game and provides name, which must not have started, starts when someone pushes the "start" button

    [ ] Store Collection (List: as order of card dealing matters) of Players

        [ ] Requires Identity

    [ ] Handle Player actions

    [ ] Game is over when all players are done - and then dealer reveals their "hole" (hidden) card


COMPLETED TASKS

    [X] Create a Player class



# Future Features

2. [ ] Betting - UI, insurance/doubling-down/splitting - mostly DOMAIN

3. [ ] Store ongoing game state in database (H2 first) to support simultaneous multiple games - ARCH/TECH

    [ ] Games need IDs

    [ ] Test PostgreSQL using testcontainers.io


## Bug Fixes/Improvements

[ ] Fix Dealer cards both are showing in Web UI

[ ] Fix Dealer blackjack (not currently detected)

[ ] DealerHand subclass?



[ ] Enforce constraints:

    [ ] Can't draw card into hand if it's busted - throw an IllegalStateException

                [ ] Possible domain language fixes: round? game?
                [ ] Need a Service class
                [ ] Add more tests to HandDto


# Completed

[X] Make sure game is over when player is dealt Blackjack

[X] Add constraints -- throw exceptions if try to hit or stand when game is already over

[X] Fix flaky test: BlackjackControllerWiringTest#donePageShowsFinalGameViewWithOutcome

[X] Persist the final state and outcome of a game when it's over

    [X] Where/how to store?

        [X] Write to a file, comma-separated (csv), append-only

            [X] Following Hexagonal architecture

                [X] Create an Port interface for writing
                [X] Test via behavior (spy)

    ----------> [X] Implement file-based storage of Game Outcome:
                    Each line of the file contains (separated by commas)
                    the final hands for the dealer and player
                    (each card is Rank+Suit, and cards are separated
                     by slashes), and the outcome of the round

                    <dealer's hand>,<player's hand>,<description of outcome>

                    For example:

                    A♥/9♥,3♣/5♠/10♠,Player Loses

                [X] GameOutcomeDto -> GameResultDto
                [X] Title case of Enum
                        PLAYER_BUSTED -> Player Busted
                    exception is
                        Blackjack -> Player Wins Blackjack


[X] Constraint: Can only call determineOutcome() if the game is over Throw IllegalStateException
