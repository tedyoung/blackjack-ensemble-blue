Mission Ideas
-------------

# FEATURE IN-PROGRESS

[ ] Multiple players for the one ongoing game - DOMAIN

NEXT:
=====

    [ ] {REFACTOR}
        Split domain into domain vs. application -- abide by Hex Arch
            Service and elsewhere?

        [ ] Add ArchUnit test for checking Hex Arch violations

--> NEXT: check on these, are we done here:
            [ ] Fixing up tests to check for game.isGameOver()
                -- gathering tests together: do we need more coverage for isGameOver()?
            [ ] GameService can use isGameOver() to know when to notify Ports
                -- Do we need new tests or modify Repository/GameMonitor tests for Game Over situations:
                    1. initial deal with Blackjack
                    2. player hits and goes bust
                    3. player stands

        [ ] Need to move mapping of Enum to String out of the domain (including StubDeck)

        [ ] GameService.currentGame() perhaps should only return a read-only view to prevent commands from being directly executed against Game (and entity) from places like the BlackjackController?

(Update diagram to show what it "should" look like)

    [ ] {BUG}
        Deck runs out of cards when playing multiple games

    [ ] {FEATURE}
        Multiple (more than one) decks mixed together

    [ ] {TEST REFACTOR}
        Replace direct StubDeck and StubDeckFactory (single and multiplayer) with StubDeckBuilder
        (ongoing/as needed)

    [ ] {TEST REFACTOR}
        Create GameBuilder to combine with StubDeckBuilder to specify the number of players
        that is validated across both Deck and Game

    [ ] {UI FEATURE}
        Use Card images instead of text

## Stub Deck support

    [ ] Test Data Builder for building decks: [mostly done]
                StubDeckBuilder.playerCountOf(3)
                    .addPlayerDealtBlackjack()                  // player 1
                    .addPlayerHitsOnceAndDoesNotBustAndStands() // player 2
                    .addPlayerHitsAndGoesBust()                 // player 3
                    .withDealerHitsOnTheirTurn()                // dealer
                    .build();

    [ ] Extract Deck to an interface, so we can stop the subclassing madness that is StubDeck

    [ ] Different default Dealer hands

## Multiple Players

    [ ] Multiple players, one "screen" (not multiple players each with their own screen), each player taking their turn sequentially

        [ ] BUG: Double-stand-button-click! Use synchronization token to fix.

        [ ] (Maybe? Non-trivial) UI: Add "confirm" button after player's turn is over before moving to next player

        [ ] UI: Add button to Start New Game after game is over

        [ ] Get rid of these in Multi-player situation?

            [ ] Determine outcome for multiplayer
                public PlayerOutcome determineOutcome() {

            [ ] Value of multiplayer hands
                public int playerHandValue() {

            [ ] Hands for multiplayer
                public List<Card> playerCards() {
                and deal with usage in GameView class


        [ ] Non-recursive approach for playerStateChanged() implementation? "Argue" (spike) in Code Refactoring

            Two directions for this experiment:

            1. Having uncompletedPlayer + completedPlayers:

                private final List<Player> uncompletedPlayers; // activePlayers
                                                               // playersWhoHaveNotTakenTheirTurnYet;
                                                               // uncompletedPlayers

                private final List<Player> completedPlayers;

            2. Having granular lists:
                private List<Player> originalPlayers;

                private final List<Player> standingPlayers;
                private final List<Player> blackjackPlayers; // completed
                private final List<Player> bustedPlayers;    // completed

        [ ] Segregate Single vs. Multi-player tests for DealerTurn?

        [ ] Missing abstraction for the Dealer (i.e., a class)
            Trigger: detect if the dealer took their turn

        [ ] Make test methods consistent

            [ ] (Cleanup) Drop "given" in front of test names

            [ ] Visibility: public and throws Exception (share live template?)

          [ ] Inline setup in CsvGameRepositoryTest:29 and 42, to make each test method readable in ISOLATION

          [ ] UI: show what happened to the player that is now done above the Dealer's hand

          [ ] Maybe: move "game state" to be an Enum instead of a boolean query

          [ ] UI: show the hand's "value" in the Web layout

          [ ] Exception for "hit" when Player doesn't have 2 cards (i.e., must have 2 or more)


      [ ] Consider replacing growing number of Game constructors with a test builder?

      [ ] StubDeck is not meant for use at the PLAYER object level (see PlayerDoneTest), create alternate?

      [ ] Shift language from game-oriented to player-oriented

          [ ] Language of PlayerOutcome Enum?



FUTURE TASKS:

    [?] (Bug) Add missing test around dealer turn behavior: the dealer must _not_ take its turn if all players go bust.

    [ ] Player joins Game and provides name, which must not have started, starts when someone pushes the "start" button

    [X] (Bug) Web UI doesn't pay attention to initial deal of Blackjack -- game should be over


COMPLETED TASKS

    [X] Create AssertJ assertion for DealerHand and "Hole" Card (see GameCardFaceTest)
        Exploration complete.

    [X] Could go further with custom assertions, e.g., in GameCardFaceTest replace
            assertThat(game.currentPlayerCards().get(0))
                    .isFaceUp();
            assertThat(game.currentPlayerCards().get(1))
                    .isFaceUp();

           (as well as the Dealer all-cards-face-up scenario)

        with:

            assertThat(game)
                    .currentPlayerHand()
                    .allCardsFaceUp();

    [X] BUG: All Player(s) initially dealt blackjack (including a single player dealt Blackjack),
        game should be over, but player presented with HIT and STAND buttons. Should redirect to "game over" page.
        CustomDeck to recreate bug: A,K,Q,7
        Also, check multiplayer if all players have Blackjack
            2 player: A,A,K,Q,K,7
        "subcutaneous" (under the skin) test

    [X] Game over and Dealer XX card not shown when all players (single or multi-player) are dealt blackjack

    [X] Feature: Create a stub deck for playing the actual game
       [X] Finish cleaning up BlackjackControllerTest, replacing StubDeck with the String version (customDeck)
       [X] refactor and clean up of BlackjackController, CustomDeckParser, etc.

    [X] If all players dealt Blackjack, Dealer does not take their turn if Dealer does not have Blackjack
        Explore why we thought this should fail, but it passes (see GameWithBlackjackTest) --hint--> what are "standing" players?

    [X] Convert to Enums for Player Done reason event

        [X] Create display strings for UI with player ID (map from Enum, once we have Player Done Reason enum)

    [X] Non-implemented rule: if Dealer dealt Blackjack, game is over

        [X] Scenario 1:
        - Given a game with two players
          And the first player has blackjack
          And the second player has any cards
          When the dealer draws a third card that adds up to 21
          Then the game result for the first player should be player wins with BLACKJACK

        [X] Scenario 2:
        - Given a game with two players
          And busted not push. When player and dealer have cards valued at 23.
        - Two players. First player stands so that dealer draws a third card.

    [X] ARGHH: Force Game() constructor to specify number of players

    [X] BUG: hide the Dealer's "hole" (hidden) card at the DOMAIN level
        Goal: While Game is In Progress -> Second Card is hidden, show "XX" instead

        * Try out using a Decorator for Card to represent Face Up property? Tried, didn't like

          * "unflip" the Dealer's second card (hole card) so it's Face Up (visible) after the game is over (after they took their turn)
            Currently try to figure out how to flip the card over: get the undecorated card, or add a "flip()" method to the decorator

          * The Adapter test (gameIsOverThenHasDealerCards) is failing and will get fixed when we fix the domain test that's failing

        * Rename GameOutcomeTest to GameOverTest

        Option 0: Card knows whether face up or face down (immutable version)

        [X] Option 1: Card knows whether face up or face down
            Pros
                least invasive approach
                most closely simulates the real world (which is different from
                modelling sufficiently the real world)
            Cons
                every card will have an attribute that most will not use/need
                would make card no longer a Value Object (mutable)
                would require a change in the mapper

        Option 2: Special card that is face down (subclass Card)
            Pros
                no change to the adapter, including mappers
                Card remains immutable
            Cons
                requires a special Suit and Rank to represent hidden

        Option 3: Dealer specific Hand subclass
            Pros
                Only the dealer hand cares about FaceUp/FaceDown
                Fixes other issues regarding dealer specific Hand behavior
                (see ConsoleHand.java line 13)
                Subclass would only be adding behavior (pushing down dealer
                 specific)
            Cons
                Can't handle all Hands generically

      [X] When we're out of players, then the game is over and show final game state for all players


    [X] Show all events for all previous players (e.g., they hit and went busted)

    [X] Refactor/clean up of PlayerOutcomeView -- stop storing player & dealerHand as fields pre-calculate in of() method

    [X] Clean up duplication between Game view and PlayerOutcomeView

    [X] Cleanup of PlayerOutcomeViewTest

    [X] Handle view of multiple players:

        [X] Thymeleaf Template of the GameOutcomeView & BlackjackController

        [X] Create VIEW for multiple players to be shown when the game is over
            Change BlackjackController.viewDone() to use the new GameOutcomeView DTO

    [X] GameOutcomeView driven via GameOutcomeViewTest
        NEXT: Drive converting Dealer Hand to list of strings (we have a failing test as a breadcrumb)

    [X] Complete Game.players() which returns PlayerResult value objects for each player, to eventually remove the getPlayers() method.

        [X] Start micro-testing ("directly against") PlayerResult

        [X] Look at potentially cleaning up GameTest tests that look at JUST the PlayerOutcome and not the entire PlayerResult

    [X] Rename addPlayerEvent -> addCurrentPlayerToEvents ?

    [X] Refactor: put condition line 104 into dealerTurn() itself


    [X] Generate events upon Player state change (reason for player becoming "done")

         [X] Add to DealerTurnTest at the end: single player goes bust THEN dealer does NOT take their turn
                  Multi-player variations as well
                  RULE: Dealer takes their turn when at least one player is STANDING

         [X] New method: haveStandingPlayers
                "standing players " (via playerStands) == don't know if they won or not until Dealer goes.
                (vs. Blackjack == "outcome known" as they've already won)
                (vs. Bust == "outcome known" as they've already lost)


        [X] Need additional tests for: if NOT all players have Blackjack, then Dealer MUST take their turn
              RULE: only if ALL players have Blackjack then Dealer MUST NOT take their turn

        [X] Add Tests: if first player has Blackjack, should move to 2nd player
              Need more variations to ensure we've got it
              e.g., 1st player HAS Blackjack, 2nd player does NOT

        [X] BUG: Dealer takes their turn after each player stands instead of when the "game" is over
                Want: Dealer takes turn only after ALL players are done (i.e., isGameOver)
                Currently two tests are failing
                See Game line 120 -- attempting to uncomment this causes many more test failures

        [X] Given a transition of Player to DONE, should generate a "player done" String event

        [X] Rename Player#drawFrom -> initialDrawFrom

        [X] Create PlayerEvent Value Object with ReasonDone (String) and PlayerId (int)

        [X] Refactor Game relating to game being over

        [X] Adapter needs "game is done" instead of "player is done" to decide what page to show


[X] UI: Indicate which player we're showing

[X] Display only current player's cards (and Dealer's)

[X] StubDeck is currently SINGLE player focused: rename to SinglePlayerStubDeck. Create another StubDeck for multiple players?

[X] Change behavior from "round" completed (game is over) when the first player is done -> to -> when ALL players are done.
    (There is a failing test for this with respect to initial deal.)

    RULE NOTE: cannot ask for a player's outcome until all players and dealer are done
      i.e., definition of GAME IS DONE/OVER -> all players have completed their turn and dealer has completed its turn
      (does not make sense to ask for outcome until game is done)

    Need to clarify difference between ALL PLAYERS ARE DONE (and the dealer needs to go)
      VS.
        GAME IS OVER (and we can evaluate Outcome)

    [X] Extract boolean expression to query method: if (currentPlayerIndex == players.size()) {

    [X] replace currentPlayerIndex to use an iterator?

    [X] roundCompleted could be better named gameCompleted

[X] Command: move to next player

[X] Refactor single player to be List of just one player, no external behavioral changes

[X] Initial deal to two players

[X] Fix numOfPlayers and numberOfPlayers variables

     [X] Initial deal: detect "current player", which depends on if any player is dealt Blackjack

         [X] Requires us to be able to differentiate players, perhaps by adding their names as Strings (and maybe ID, too)

              [X] Query: who is the current player? -> return Player (law of Demeter?)

              [X] Query: is current player done?

    [X] Create a Player class

    [X] GameView: refactor stringListOf() to be a function to transform List<Card> to List<String>
        (instead of the currently confusing accumulating parameter)

    [X] Finish moving player-related functionality from Game (and elsewhere) into Player class

        [X] In-progress: get rid of Player.getPlayerHand() by:

            [X] Finding and getting rid of Game.playerHand() usages
            [X] Push Game.playerCards() to Player.cards()
            [X] playerHand.value() needs to move to Player class

            [X] Cleanup: make methods public/private as appropriate

    [X] Shift language from game-oriented to player-oriented

        [X] Consider isGameOver vs. isPlayerDone (once there are multiple players)
            [X] requireGameIsOver -> requirePlayerIsDone
            [X] Rename updateGameDoneState() to be updatePlayerDoneState()

        [X] GameOutcome vs PlayerOutcome

            [X] Outcome method belongs to Player

        [X] Move "isPlayerDone" state from the Game class to Player

    [X] Fix Feature Envy of change in "player done" state upon card dealt and player stands

            [X] Game#playerStands() -- move feature envy code to Player

            [X] Game#playerHits() -- move feature envy code to Player

    [X] Tidying up on Player that needs to be done (e.g., inside hit())

        [X] Is implementation of stand() still OK?

        [X] Look at public interface of Player carefully


# Future Features

2. [ ] Betting - UI, insurance/doubling-down/splitting - mostly DOMAIN

3. [ ] Store ongoing game state in database (H2 first) to support simultaneous multiple games - ARCH/TECH

    [ ] Games need IDs

    [ ] Test PostgreSQL using testcontainers.io


## Bug Fixes/Improvements

[ ] Fix Dealer blackjack (not currently detected)

    [ ] If the Dealer is dealt Blackjack, all players lose unless they have Blackjack themselves (in which case it's a push)



[ ] Enforce constraints:

    [ ] Must not be able to draw card into hand if it's busted - throw an IllegalStateException

                [ ] Possible domain language fixes: round? game?
                [ ] Need a Service class
                [ ] Add more tests to HandDto


# Completed

## Stub Deck related

[X] Test actual cards in player and dealer hands instead of the StubDeck
    (see StubDeckBuilderTest.createTwoPlayerAndDealerEachWithFourCards)

[X] Add docs for how the StubDeck is built (its internal structure)

[X] Do additional refactoring for the StubDeckBuilder

[X] A queue for dealer ranks

[X] Flexible player hand -- addPlayerWithRanks(): can provide list of Ranks [REFACTOR TO THIS]

[X] Refactor the 2 literal to a constant

[X] Simplify the 3 player to just be one (to exercise addPlayerHitsAndGoesBust)

[X] Enforce constraint that number of players specified is the number of players actually added

[X] Change build() to be the Dealer hand specification (as the termination of the builder) -- buildWithDealerHand...




[X] Make sure game is over when player is dealt Blackjack

[X] Add constraints -- throw exceptions if try to hit or stand when game is already over

[X] Fix flaky test: BlackjackControllerWiringTest#donePageShowsFinalGameViewWithOutcome

[X] Persist the final state and outcome of a game when it's over

    [X] Where/how to store?

        [X] Write to a file, comma-separated (csv), append-only

            [X] Following Hexagonal architecture

                [X] Create an Port interface for writing
                [X] Test via behavior (spy)

    ----------> [X] Implement file-based storage of Game Outcome:
                    Each line of the file contains (separated by commas)
                    the final hands for the dealer and player
                    (each card is Rank+Suit, and cards are separated
                     by slashes), and the outcome of the round

                    <dealer's hand>,<player's hand>,<description of outcome>

                    For example:

                    A♥/9♥,3♣/5♠/10♠,Player Loses

                [X] GameOutcomeDto -> GameResultDto
                [X] Title case of Enum
                        PLAYER_BUSTED -> Player Busted
                    exception is
                        Blackjack -> Player Wins Blackjack


[X] Constraint: Can only call determineOutcome() if the game is over Throw IllegalStateException
