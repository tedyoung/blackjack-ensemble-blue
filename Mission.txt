Mission Ideas
-------------

# FEATURE IN-PROGRESS

[ ] Multiple players for the one ongoing game - DOMAIN


NEXT TASKS:

[ ] Multiple players, one "screen" (not multiple players each with their own screen), each player taking their turn sequentially

        [ ] Test Data Builder for building decks:
                new StubDeckBuilder()
                    .withPlayerDealtBlackjack()
                    .withPlayerGoingBust()
                    .withPlayerDealtBlackjack()
                    .withDealerHitsOnTheirTurn();

-->     [ ] Non-recursive approach for playerStateChanged() implementation? "Argue" (spike) in Code Refactoring

            Two directions for this experiment:

            1. Having uncompletedPlayer + completedPlayers:

                private final List<Player> uncompletedPlayers; // activePlayers
                                                               // playersWhoHaveNotTakenTheirTurnYet;
                                                               // uncompletedPlayers

                private final List<Player> completedPlayers;

            2. Having granular lists:

                private final List<Player> standingPlayers;
                private final List<Player> blackjackPlayers; // completed
                private final List<Player> bustedPlayers;    // completed

        [ ] Non-implemented rule: if Dealer dealt Blackjack, game is over

            [ ] If all players dealt Blackjack, Dealer does not take their turn if Dealer does not have Blackjack

        [ ] Segregate Single vs. Multi-player tests for DealerTurn?

        [ ] Missing abstraction for the Dealer (i.e., a class)
            Trigger: detect if the dealer took their turn

        [ ] Make test methods consistent

            [ ] (Cleanup) Drop "given" in front of test names

            [ ] Visibility: public and throws Exception (share live template?)

          [ ] Inline setup in CsvGameRepositoryTest:29 and 42, to make each test method readable in ISOLATION

          [ ] UI: show what happened to the player that is now done above the Dealer's hand

          [ ] Maybe: move "game state" to be an Enum instead of a boolean query

          [ ] Update (or add another) multiplayer event test to have first player get Blackjack

          [ ] Convert to Enums for Player Done reason event

              [ ] Create display strings for UI with player ID (map from Enum, once we have Player Done Reason enum)

          [ ] BUG: hide the Dealer's "hole" (hidden) card at the DOMAIN level

          [ ] UI: show the hand's "value" in the Web layout

          [ ] Exception for "hit" when Player doesn't have 2 cards (i.e., must have 2 or more)


      [X] Rename addPlayerEvent -> addCurrentPlayerToEvents ?

      [X] Refactor: put condition line 104 into dealerTurn() itself


      [X] Generate events upon Player state change (reason for player becoming "done")

           [X] Add to DealerTurnTest at the end: single player goes bust THEN dealer does NOT take their turn
                  Multi-player variations as well
                  RULE: Dealer takes their turn when at least one player is STANDING

               [X] New method: haveStandingPlayers
                    "standing players " (via playerStands) == don't know if they won or not until Dealer goes.
                    (vs. Blackjack == "outcome known" as they've already won)
                    (vs. Bust == "outcome known" as they've already lost)


          [X] Need additional tests for: if NOT all players have Blackjack, then Dealer MUST take their turn
              RULE: only if ALL players have Blackjack then Dealer MUST NOT take their turn

          [X] Add Tests: if first player has Blackjack, should move to 2nd player
              Need more variations to ensure we've got it
              e.g., 1st player HAS Blackjack, 2nd player does NOT

          [X] BUG: Dealer takes their turn after each player stands instead of when the "game" is over
                Want: Dealer takes turn only after ALL players are done (i.e., isGameOver)
                Currently two tests are failing
                See Game line 120 -- attempting to uncomment this causes many more test failures

          [X] Given a transition of Player to DONE, should generate a "player done" String event

          [X] Rename Player#drawFrom -> initialDrawFrom

          [X] Create PlayerEvent Value Object with ReasonDone (String) and PlayerId (int)

          [X] Refactor Game relating to game being over

          [X] Adapter needs "game is done" instead of "player is done" to decide what page to show

      [ ] When we're out of players, then the game is over and show final game state for all players

      [ ] Consider replacing growing number of Game constructors with a test builder?

      [X] UI: Indicate which player we're showing

      [ ] StubDeck is not meant for use at the PLAYER object level (see PlayerDoneTest), create alternate?

      [X] Display only current player's cards (and Dealer's)

      [X] StubDeck is currently SINGLE player focused: rename to SinglePlayerStubDeck. Create another StubDeck for multiple players?


      [X] Change behavior from "round" completed (game is over) when the first player is done -> to -> when ALL players are done.
          (There is a failing test for this with respect to initial deal.)

          RULE NOTE: cannot ask for a player's outcome until all players and dealer are done
            i.e., definition of GAME IS DONE/OVER -> all players have completed their turn and dealer has completed its turn
            (does not make sense to ask for outcome until game is done)

          Need to clarify difference between ALL PLAYERS ARE DONE (and the dealer needs to go)
            VS.
              GAME IS OVER (and we can evaluate Outcome)

          [X] Extract boolean expression to query method: if (currentPlayerIndex == players.size()) {

          [X] replace currentPlayerIndex to use an iterator?

          [X] roundCompleted could be better named gameCompleted

      [X] Command: move to next player

      [X] Refactor single player to be List of just one player, no external behavioral changes

      [X] Initial deal to two players

      [X] Fix numOfPlayers and numberOfPlayers variables

[ ] Shift language from game-oriented to player-oriented

    [ ] Language of PlayerOutcome Enum?


FUTURE TASKS:

    [ ] (Bug) Add missing test around dealer turn behavior: the dealer must _not_ take its turn if all players go bust.

    [ ] Player joins Game and provides name, which must not have started, starts when someone pushes the "start" button

    [ ] (Bug) Web UI doesn't pay attention to initial deal of Blackjack -- game should be over

    [ ] Store Collection (List: as order of card dealing matters) of Players

        [ ] Requires Identity

    [ ] Handle Player actions

    [ ] Game is over when all players are done - and then dealer reveals their "hole" (hidden) card


COMPLETED TASKS

     [X] Initial deal: detect "current player", which depends on if any player is dealt Blackjack

         [X] Requires us to be able to differentiate players, perhaps by adding their names as Strings (and maybe ID, too)

              [X] Query: who is the current player? -> return Player (law of Demeter?)

              [X] Query: is current player done?

    [X] Create a Player class

    [X] GameView: refactor stringListOf() to be a function to transform List<Card> to List<String>
        (instead of the currently confusing accumulating parameter)

    [X] Finish moving player-related functionality from Game (and elsewhere) into Player class

        [X] In-progress: get rid of Player.getPlayerHand() by:

            [X] Finding and getting rid of Game.playerHand() usages
            [X] Push Game.playerCards() to Player.cards()
            [X] playerHand.value() needs to move to Player class

            [X] Cleanup: make methods public/private as appropriate

    [X] Shift language from game-oriented to player-oriented

        [X] Consider isGameOver vs. isPlayerDone (once there are multiple players)
            [X] requireGameIsOver -> requirePlayerIsDone
            [X] Rename updateGameDoneState() to be updatePlayerDoneState()

        [X] GameOutcome vs PlayerOutcome

            [X] Outcome method belongs to Player

        [X] Move "isPlayerDone" state from the Game class to Player

    [X] Fix Feature Envy of change in "player done" state upon card dealt and player stands

            [X] Game#playerStands() -- move feature envy code to Player

            [X] Game#playerHits() -- move feature envy code to Player

    [X] Tidying up on Player that needs to be done (e.g., inside hit())

        [X] Is implementation of stand() still OK?

        [X] Look at public interface of Player carefully


# Future Features

2. [ ] Betting - UI, insurance/doubling-down/splitting - mostly DOMAIN

3. [ ] Store ongoing game state in database (H2 first) to support simultaneous multiple games - ARCH/TECH

    [ ] Games need IDs

    [ ] Test PostgreSQL using testcontainers.io


## Bug Fixes/Improvements

[ ] Fix Dealer cards both are showing in Web UI

[ ] Fix Dealer blackjack (not currently detected)

    [ ] If the Dealer is dealt Blackjack, all players lose unless they have Blackjack themselves (in which case it's a push)

[ ] DealerHand subclass?

    [ ] Should the DealerHand be where the dealer turn happens (i.e., the DealerHand does the playing itself)?



[ ] Enforce constraints:

    [ ] Can't draw card into hand if it's busted - throw an IllegalStateException

                [ ] Possible domain language fixes: round? game?
                [ ] Need a Service class
                [ ] Add more tests to HandDto


# Completed

[X] Make sure game is over when player is dealt Blackjack

[X] Add constraints -- throw exceptions if try to hit or stand when game is already over

[X] Fix flaky test: BlackjackControllerWiringTest#donePageShowsFinalGameViewWithOutcome

[X] Persist the final state and outcome of a game when it's over

    [X] Where/how to store?

        [X] Write to a file, comma-separated (csv), append-only

            [X] Following Hexagonal architecture

                [X] Create an Port interface for writing
                [X] Test via behavior (spy)

    ----------> [X] Implement file-based storage of Game Outcome:
                    Each line of the file contains (separated by commas)
                    the final hands for the dealer and player
                    (each card is Rank+Suit, and cards are separated
                     by slashes), and the outcome of the round

                    <dealer's hand>,<player's hand>,<description of outcome>

                    For example:

                    A♥/9♥,3♣/5♠/10♠,Player Loses

                [X] GameOutcomeDto -> GameResultDto
                [X] Title case of Enum
                        PLAYER_BUSTED -> Player Busted
                    exception is
                        Blackjack -> Player Wins Blackjack


[X] Constraint: Can only call determineOutcome() if the game is over Throw IllegalStateException
