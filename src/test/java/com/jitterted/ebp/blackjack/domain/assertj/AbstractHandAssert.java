package com.jitterted.ebp.blackjack.domain.assertj;

import com.jitterted.ebp.blackjack.domain.Card;
import com.jitterted.ebp.blackjack.domain.Hand;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link Hand} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractHandAssert<S extends AbstractHandAssert<S, A>, A extends Hand> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractHandAssert}</code> to make assertions on actual Hand.
   * @param actual the Hand we want to make assertions on.
   */
  protected AbstractHandAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Hand's cards contains the given Card elements.
   * @param cards the given elements that should be contained in actual Hand's cards.
   * @return this assertion object.
   * @throws AssertionError if the actual Hand's cards does not contain all given Card elements.
   */
  public S hasCards(Card... cards) {
    // check that actual Hand we want to make assertions on is not null.
    isNotNull();

    // check that given Card varargs is not null.
    if (cards == null) failWithMessage("Expecting cards parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.cards(), cards);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Hand's cards contains the given Card elements in Collection.
   * @param cards the given elements that should be contained in actual Hand's cards.
   * @return this assertion object.
   * @throws AssertionError if the actual Hand's cards does not contain all given Card elements.
   */
  public S hasCards(java.util.Collection<? extends Card> cards) {
    // check that actual Hand we want to make assertions on is not null.
    isNotNull();

    // check that given Card collection is not null.
    if (cards == null) {
      failWithMessage("Expecting cards parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.cards(), cards.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Hand's cards contains <b>only</b> the given Card elements and nothing else in whatever order.
   * @param cards the given elements that should be contained in actual Hand's cards.
   * @return this assertion object.
   * @throws AssertionError if the actual Hand's cards does not contain all given Card elements.
   */
  public S hasOnlyCards(Card... cards) {
    // check that actual Hand we want to make assertions on is not null.
    isNotNull();

    // check that given Card varargs is not null.
    if (cards == null) failWithMessage("Expecting cards parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.cards(), cards);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Hand's cards contains <b>only</b> the given Card elements in Collection and nothing else in whatever order.
   * @param cards the given elements that should be contained in actual Hand's cards.
   * @return this assertion object.
   * @throws AssertionError if the actual Hand's cards does not contain all given Card elements.
   */
  public S hasOnlyCards(java.util.Collection<? extends Card> cards) {
    // check that actual Hand we want to make assertions on is not null.
    isNotNull();

    // check that given Card collection is not null.
    if (cards == null) {
      failWithMessage("Expecting cards parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.cards(), cards.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Hand's cards does not contain the given Card elements.
   *
   * @param cards the given elements that should not be in actual Hand's cards.
   * @return this assertion object.
   * @throws AssertionError if the actual Hand's cards contains any given Card elements.
   */
  public S doesNotHaveCards(Card... cards) {
    // check that actual Hand we want to make assertions on is not null.
    isNotNull();

    // check that given Card varargs is not null.
    if (cards == null) failWithMessage("Expecting cards parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.cards(), cards);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Hand's cards does not contain the given Card elements in Collection.
   *
   * @param cards the given elements that should not be in actual Hand's cards.
   * @return this assertion object.
   * @throws AssertionError if the actual Hand's cards contains any given Card elements.
   */
  public S doesNotHaveCards(java.util.Collection<? extends Card> cards) {
    // check that actual Hand we want to make assertions on is not null.
    isNotNull();

    // check that given Card collection is not null.
    if (cards == null) {
      failWithMessage("Expecting cards parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.cards(), cards.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Hand has no cards.
   * @return this assertion object.
   * @throws AssertionError if the actual Hand's cards is not empty.
   */
  public S hasNoCards() {
    // check that actual Hand we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have cards but had :\n  <%s>";

    // check
    if (actual.cards().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.cards());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Hand's value is equal to the given one.
   * @param value the given value to compare the actual Hand's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Hand's value is not equal to the given one.
   */
  public S hasValue(int value) {
    // check that actual Hand we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualValue = actual.value();
    if (actualValue != value) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
