package com.jitterted.ebp.blackjack.domain.assertj;

import com.jitterted.ebp.blackjack.domain.Card;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * Abstract base class for {@link Card} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractCardAssert<S extends AbstractCardAssert<S, A>, A extends Card> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractCardAssert}</code> to make assertions on actual Card.
   * @param actual the Card we want to make assertions on.
   */
  protected AbstractCardAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Card is face down.
   * @return this assertion object.
   * @throws AssertionError - if the actual Card is not face down.
   */
  public S isFaceDown() {
    // check that actual Card we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isFaceDown()) {
      failWithMessage("\nExpecting that actual Card is face down but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Card is not face down.
   * @return this assertion object.
   * @throws AssertionError - if the actual Card is face down.
   */
  public S isNotFaceDown() {
    // check that actual Card we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isFaceDown()) {
      failWithMessage("\nExpecting that actual Card is not face down but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
