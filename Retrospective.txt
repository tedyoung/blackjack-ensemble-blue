Retrospective: Ensemble #145 (Fri Dec 13, 2024)
-----------------------------------------------
Thoughts, Observations
	We were red much of the time!
		We got green for a bit when we were working on something unrelated to the failures
		Updating tests one by one to reflect change
	Hard to see the best way to connect the PlayerAccountRepository with GameBuilder
		Only one test class had to change, so not enough to guide us
		Start from the test side by extracting into a method and generalizing that test
			Could end up with degrading tests
	We don't always pay attention to readability of tests once we get them to pass
		But better than elsewhere!
		Paying attention to red test over cleaning up green?
	Need a good "domain" name for the phase after bets are placed and the initial deal
	Consistency of local variable naming: use "default" names
	Dopamine hit from predicting the correct failure of a test, "red" but a "good" red
		Watch out for autocomplete by "AI"
			It can make it hard to change once it writes the code
			Helps with unfamiliar syntax
			Need to review carefully
	Look at IDE errors, don't just guess


Retrospective: Ensemble #144 (Fri Nov 8, 2024)
----------------------------------------------
Thoughts, Observations
	Reading test failures is harder than you think (keep it simple)
		Use English and not focus on technical (method calls, etc.)
	Good to be able to switch from thinking as a developer to thinking as a user (point of view)
	Talked to our Customer to validate what the game should display
	Feel like cleaning up the test should have happened before we moved on to the next feature
		Moved on to fixing the Done view before we cleaned up the tests
	Test setup getting overly verbose
		Have a way to more easily create players with IDs and names
	Ensemble with 3 people feels very fast
		Bit more intense
	Had a lot of fun!
		Breath of fresh air to have fast tests (and good tests)
		+1
		Quick to get back up to speed
Learnings
	Clarified rules around Adapters accessing "Repository" (really a Finder), which is fine
		View is a snapshot of the current state of the Game, needs the "Finder" to resolve the Player Name, but doesn't change state


Retrospective: Ensemble #143 (Fri Nov 1, 2024)
----------------------------------------------
Thoughts, Observations
    Spring Form objects are a bit confusing when using for both providing data to the Thymeleaf template AND for extracting submitted form contents
        For BettingForm we use both ids and names, but upon submission, we only care about the bet values
        Perhaps split into two objects?
    Thymeleaf is complex and can be confusing
        Cody really helps here
    We don't currently have automated tests for the actual HTML generation
        Future we could write an HTMLunit test
    Felt good to be back!!
        +1 +1 +1
    Assertions aren't always as readable as they could be
        Pay more attention to what we care about and what we don't care about in test setup
        Keep the things we care about obvious and the irrelevant things hidden
    Test names too technical vs. more domain-ish?
        Good that we renamed the tests to be more expressive as we encountered
Learnings
    Appropriate Primitive Obsession for View/Form objects
Next Time
    Is there a way to add getting the player name without breaking a whole bunch of tests?
    Look at the @Disabled test
Questions?
    Can we use DataFaker?


Retrospective: Ensemble #142
----------------------------

[canceled]

Retrospective: Ensemble #141 (Fri June 14, 2024)
------------------------------------------------
Thoughts, Observations
	4 minutes is kinda short for 3 participants
	Lada is happy to be back! +1
	Start with anonymous implementation might have been confusing
		PlayerAccountFinder as inner class inside the test bettingFormContainsPlayerNames() might have been better to push it out
Learnings
	Change Signature lets you type anything into the variable definition, lambda, null, garbage, whatever
	Quick fix for constructor to bind variables
	Quick fix for @Override to fix via "pull up" method
		Can use that directly as a refactoring
	Quick fix to implement the interface (on PlayerAccountRepository with PlayerAccountFinder interface)
	Create (read-only) property quick-fix creates the method AND the field
	Some refactorings are mini-wizards, tab/enter through them to get the benefit
		Watch out for the blue rectangle

Retrospective: Ensemble #140 (Fri May 24, 2024)
-----------------------------------------------
Thoughts, Observations
	"I don't DRY-up my DTOs"
		Not all duplication is bad, sometimes it's very useful
			e.g., make it easier for Thymeleaf templates to consume
	If Navigator doesn't have enough context, then need more guidance/background of what's needed
	Outside-in TDD for new/changed functionality
		(outside may not always be the UI)
	Adapter is allowed to READ from an Outbound Port (but not modify, so best to use a Read-only Port)
		According to Ted, at least. :)
		This is a nuanced rule, so if there's less confidence in the team's judgment, you might want to enforce "No Port Access from Adapter" rule
	Finding out WHY the Mission asked for putting the PlayerName into the PlayerInGame was important to flesh out the true reason, which led us to not do that, but get the player name at the Adapter level
Learnings
	Learned about Spring MVC auto-conversion of incoming HTTP message text to variables/objects
	For user-entered data (e.g., text field), accept a String, but for pre-filled data (select from list), you can use an int/long directly
	Spring MVC docs are informative +1
	Parallel change: extract part of the old method that has the signature you want, or copy to create a new version


Retrospective: Ensemble #139 (Wed May 15, 2024)
-----------------------------------------------
Thoughts, Observations
	Reinforced why cleaning up commented out code right away: so we don't have to remember why it was commented out in the first place
	Finally deleted commented out code!
	Liked reviewing previous Retrospectives
	Having only 3 people in Ensemble feels more fast-paced
	Loosened things up, especially when collaborating on Thymeleaf template
	Fun!
	Mike triggered same thought about using Introduce Parameter to push out (change signature) of createGame to accept the PlayerSelectionForm instead of NewGameForm
	Cody wanted to invite Lada into the Participants file
Learnings
	Learned about Thymeleaf's "th:object" and "th:for(#ids)"


Retrospective: Ensemble #138 (Fri April 26, 2024)
-------------------------------------------------
Thoughts, Observations
    Haven't used the Mission in a while, could that have helped as a reminder
    We don't have a habit of looking through "Next Time" when we start
    Found another disabled test that we're not sure about
    Implementing our custom equals() was harder than expected
        Confused playerId with the object itself
        Dealing with the generated code and then modifying it, vs. writing it from scratch
        Entity's ID defined equality, but that null IDs are NOT equal to each other
            Except if the objects are the same instance
        We didn't look at hashCode!
            What's the implication of this?
    Created a TestableAggregate subclass for testing instead of using PlayerAccount
    Turns felt shorter because of fewer pauses
        Do we pause explicitly, or make turns longer?
    Test names out of sync, or too short (or too long)
    Disabling tests with no reason could be improved by adding a reason
    "ratchet up the assertion"
        Make the test assertion more precise, e.g., "hasSize(2)" to "containsExactlyInAnyOrder(...)"
Next Time
    What's up with the disabled test?
    #3: clean up commented out code in BlackjackControllerTest
    Make hashCode "correct" for the case when playerId is null
    Be explicit about "huddle" for pausing
    Add reasons for disabled test

Retrospective: Ensemble #137 (Fri April 19, 2024)
-------------------------------------------------
Thoughts, Observations
    Using dependencies (coupling) to figure out responsibilities of the controller class(es)
        Coupling and cohesion
        Led us to moving separate responsibility out of BlackjackController into a new controller, which made it smaller
        Test against WelcomeController (currently) doesn't need GameService
        Code Smell: adding a new dependency that's only needed by 1 (or few) methods
            Passing in dummies frequently might be a hint that there's an issue
    Liked discussion around factory creation methods vs constructors
        Understanding why we're using the methods we're defining
            DTO from(Domain) for transforming Domain to DTO vs. of() for easy Value Object creation
    Confused by unexpected behavior around the index page
        Multiple steps to finally find that it's "magic"
            But perhaps not the magic we were expecting
    Break It To Learn
        and then might be surprised by no tests failing
            If the result isn't expected, investigate
    Inside-Out vs. Outside-In
        Outside-in can provide test "backstop" vs. Inside-Out having to write more tests
            Not every single method necessary needs to be test-driven
            Inside-out might result in a bad "protocol" (API of the object is wrong!)
    Good day!
Learnings
    Spring Boot tries to be helpful by pulling static resources from lots of places (not just /static)
Next Time
    Clean up and delete the commented out test code


Retrospective: Ensemble #136 (Fri April 5, 2024)
------------------------------------------------
Thoughts, Observations
    Big group today
        Felt different
        Felt good
    Got a bit confused and frustrated about Thymeleaf
    Forms can be a bit confusing in context of Spring
        Had pre-populated information, vs. empty form that has user enter information
    Noticed some "noise" in setup code for the BlackjackControllerTest
    Bit of a delay in updating names: name of the test, name of attribute in the model, etc.
        As the purpose of the test changes, update the names to reflect their new purpose
Learnings
    Learned about static index.html
    Learned about Model and testing
    Forms vs. Views
    (re)learned about MVC test
        Does the minimum possible, anything else we do one layer down (as an I/O-Free test)
        All Tests are slow, so better to run only the MVC test that you're working on
    Learning more about AssertJ
        Learning it better/more deeply
    Cmd+Shift+T/Ctrl+Shift+T to go between Test and Test Subject
Next Time
    Clean up BlackjackControllerTest


Retrospective: Ensemble #135 (Fri March 29, 2024)
-------------------------------------------------
Strong-style is not always useful, e.g., "whiteboarding" some ideas and thoughts
	Driver is not really learning
	It's very tedious and awkward for both parties
	Let's stop and huddle, which means that the person with the idea or question becomes driver+navigator
Finally deleted events from EventSourcedAggregate!
	Once we store the lastEventId explicitly, that let us delete events
Let's try this! Try instead of thinking.
More participation among folks during a rotation
Using AssertJ's .as() to add a description to be displayed if the test fails
Safe Delete is available on the Refactor This menu or the Refactor menu
	Command+Delete (Cmd+Fn+Backspace) or Alt+Delete


Retrospective: Ensemble #134 (Fri March 15, 2024)
-------------------------------------------------
Thoughts, Observations
    Seeing the "don't let super-class constructors call abstract methods implemented by the subclass" problem makes it more real
        Experience is more powerful than reading/watching
        Sad that moving the for loop into the base class didn't work, unclear what a good solution
    Lambdas can't modify primitives,  so we use an AtomicInteger
        Can't point the variable at a new reference inside a lambda, so just add a level of indirection
    Postcondition assertion: discovered it wasn't providing enough information in the error message, but we were still confused.
        Then added more error message information to see what happens
    Two "small" tasks took longer than we thought
        Hofstadter's Law
    Mob hand-off when tests passed (incorrectly) was made less of an issue, because other machines were failing, so we were pretty sure it was a machine-specific problem instead of spending lots of time troubleshooting the code
    Off-by-one errors are hard
Questions?
    Could have an internal/separate state object be useful (instead of storing the Aggregate's state directly in PlayerAccount, have it in an inner class of PlayerAccountState)
        Could make that internal state object part of the generification of the EventSourceAggregate base class

Retrospective: Ensemble #133 (Fri March 8, 2024)
------------------------------------------------
Thoughts, Observations
    "Mental Model Sync-up"
    Ensure clause vs. Require clause
        Bertrand Meyer's Design by Contract
        Preconditions and Postconditions
    Thumb-voting to decide what to do
        We decided to ensure that the in-memory repository ensures that eventDto's ids are increasing (to simulate what the database would do)
    Keeping track of object references can get confusing (see the PlayerAccountRepository.save() method)
        Which could lead to bugs down the line
    Purposely created a test to drive new behavior, and then deleted the test
        Felt weird/artificial because we were trying to push private implementation in a certain direction
        Better: extract the behavior into a smaller class that exposes the behavior and test-drive that new class (e.g., a UniqueIdList)
    Monotonically Increasing: later values have a higher value, does not imply consecutive (so can skip numbers)
        Usually found in distributed systems (e.g., database IDs)
Learnings
    Map's computeIfAbsent also returns the value
Next Time
    Use a REAL database for storing the PlayerAccountAggregates
    Use a library for storing events?

Retrospective: Ensemble #132 (Fri March 1, 2024)
-----------------------------------------------
Thoughts, Observations
	Highly enjoyable!
		Love the design discussion
		Discussed options and what works, what wouldn't
		Coding was fun as well
		Experimentation was good
			Just change the code to see, but wasn't quite there yet, so reverted changed (so nice to have good tests)
	Pattern of command methods creating an enqueuing events, which are then applied
	Parallel change (with "freshEvents")
		Swapping freshEvents for events where it made sense—until it didn't
		How to get rid of the "old" behavior, is the hard part
	Ugly Green
		Lie, cheat, steal, break rules, don't worry about clean or pretty—whatever it takes
		Refactoring is the time to clean and tidy the code
			And only have to focus on that and not ALSO solving the problem
		Otherwise leads to writing too much code
		Small steps is always better than larger
	Felt like I was coding, even though I only navigated
	Zooming is great to increase size of fonts, etc.
Learnings
	Willem Larsen: micro-retrospectives (every rotation for 3-5 minutes)
		Throw "stickies" on a board (e.g., Miro) and then quickly go through them
			Could write them as the rotation was happening and/or during the micro-retro
		For tiny things, leaving bigger issues for the larger/longer retrospectives
	5-7 minute keystroke practice once or twice a week
		Turn Presentation Assistant on
	Cmd+Shift+A (Ctrl+Shift+A) to get access to the Zoom
		Can assign your own shortcut from the Actions search

Retrospective: Ensemble #131 (Fri Feb 16, 2024)
-----------------------------------------------
Thoughts, Observations
    Good session, made good progress
        Fun!
    Humbling: need to spend some time doing intentional learning
        Especially stream mapping and optionals
        Seemed so easy!
    With only 3 participants, feels much faster, less time "leaning back and enjoying the ride"
        Perhaps led to faster progress?
    Felt a little less "formal" and working well together: due to either smaller rotation, or we know each other better. More talking/discussion that didn't feel intrusive.
        Rotation Timer switching is still useful to take a different step
        Tiny step vs. stepping off a cliff
    Appreciated the discussion around instantiating the ObjectMapper vs. making it a static variable and GC related issues.
    "Do it out of empathy for the database"
    "Comment out these lines" vs. "Comment out the switch statement"
        Strive for higher-level Navigation commands over low-level detail
    "Just do the rest"
    "scroll down, no the other way, no more" vs. "bring line 25 into view" or "bring the entire method Pants into view"
Learnings
    Optionals are special collections (can hold either none or one element)

Retrospective: Ensemble #130 (Fri Feb 9, 2024)
----------------------------------------------
Thoughts, Observations
    Good to understand when to use Generics vs. inheritance and base classes
    "PlayerWonGame" vs. "Player 1 Game" are homonyms
    Pairing/Ensembling increases communication among colleagues (because you get to know them better)
    When refactoring: focus (first) on what's changed recently, not all the code
    If things look slightly similar, see if you can make them even more similar
        Keep pushing on the similarity until you can get to exact duplication
            And the use Inline Method!
    Preference to keep DTO constructors expressed as using primitives instead of doing conversion/transformations inside the constructor
Learnings
    Unnamed variables (released in Java 22)
    ObjectMapper for JSON to Object (and vice versa)
    Don't throw checked exceptions in methods that will be used in the context of a stream operation
Next Time
    Set up Presentation Assistant to show Mac and Windows shortcuts


Retrospective: Ensemble #129 (Fri Jan 26, 2024)
-----------------------------------------------
Thoughts, Observations
    Jackson JSON annotations overwhelming
        Verbose way of converting when things are non-standard
        Ask ChatGPT to figure this out
    Happy to avoid directly annotating Domain objects
    Switched to more "typical" ensemble behavior when trying to solve difficult problems (with JSON mapping)
        Can be a bit more chaotic
            With parallel work from individuals, bringing ideas and possible solutions back to the Ensemble
        Making sure the Driver knows who (which Navigator) to pay attention to can reduce the chaos
        Making it explicit that we're no longer in strict Navigator-Driver mode
    Interesting solution(s) from JetBrains AI for the JSON serializing-with-type problem
    Write it (event-sourcing persistence) yourself to understand what a library might provide
Learnings
    Join Lines: Ctrl+Shift+J (eliminates whitespace in the way that you'd want)
Next Time
    Have event concrete subtypes provide an "asMap" method to make conversion easier?
    Instead of embedding the event type into the JSON, make it a separate database column (field)


Retrospective: Ensemble #128 (Fri Jan 19, 2024)
-----------------------------------------------
Thoughts, Observations
	Liked sketching out things in more detail to help understand where we're going
		Especially what a record in the database table will look like
	Creating the DTOs is interesting as we're storing JSON instead of concrete (primitive) fields
	Composite ID for events: PlayerID + EventId for storing the events in the DB
	Was confused and unclear about things, storing the events +1
		A good confusion
Learnings
	String Templates ("interpolation") as a Preview Feature
	Read the JEPs!


Retrospective: Ensemble #127 (Fri Jan 12, 2024)
-----------------------------------------------
Thoughts, Observations
    Felt a bit weird to have a concrete Repository implementation in the application layer
    Prefer writing tests against minimal amount of desired behavior (IDs are unique vs. next ID = 80)
    A little more scared of the change to returning Optional from the load/find method: everything will have to change
        CHANGE RETURN TYPE: Can't really use Change Signature, so create new method, delegate old to new, then inline as needed
    Felt really rusty today
    In-memory repositories are often built in very much the same way
        Unique IDs
        Save by ID
        Store the snapshot ("content") of the object instead of just storing a reference to the object
            Better simulates "real" repositories
            Will be easier because we already have the "content" as events
Learnings
    IntelliJ IDEA can auto-fix to wrap our int with PlayerId when the parameter is required to be a PlayerId type
Next Time
    Tell a better story by rearranging the order of test methods and make names consistent in PlayerAccountRepositoryTest


Retrospective: Ensemble #126 (Fri Jan 5, 2024)
----------------------------------------------
Thoughts, Observations
    TDD is a series of TINY moves
    Repository load() vs. findById() vs. findOne() -- all the same idea
    Liked how we started from the outside, disabled, and then moved down another layer, disabled again and finally started implementing
        TDD Inception
        The outer test helps define what is needed from the next layers (objects)
        Not "real" layers: but distance from where the behavior is implemented
    Read model is basically a cache (holds computed state of event-sourced aggregate)
        It's an optimization
        If it's a separate table in a database (or held in a completely different database, e.g., document database), then can be accessed outside the app
    Frequent commits via "mob next"
Learnings
    Eventual Consistency = Weak Consistency (vs. Strong Consistency = Transactional)
    Quick Fix to transform Constructor to Factory Method
    Ctrl+Shift+; | Cmd+Shift+;
        run recent TESTS
Next Time
    Future: generify the EventSourcedAggregate
        Create dedicated subclass (nested class) for testing only

Retrospective: Ensemble #125 (Fri Dec 29, 2023)
-----------------------------------------------
Thoughts, Observations
    Pattern matching with Record patterns and switch and unnamed variables (underscore) and Sealed/Permits
    Aggregates are self-contained and do not reference other aggregates directly
    Different kinds of "Commands": Command Objects (Pattern), Command Methods on Service/App Layer and on Domain Objects
        Domain Object Command method must not return any value
        Service Layer commands may return a Result
    PlayerAccount Invariant? do we require a bet to have been placed in order to process a "win"?
    Learning more about event sourcing
        Best way is to write the code
    Aggregates are for organizing/implementing how data is changed, read models may differ
        May have a "PlayerAnalytics" read model that has no command methods
Next Time
    Command methods past or present: is "win"/"lose" or "won"/"lost"??

Retrospective: Ensemble #124 (Fri Dec 22, 2023)
-----------------------------------------------
Thoughts, Observations
        (For event sourcing:) Tests being split to: Commands Generate Events and Events Project (results in new) State
            Could split along Command/Event lines: all tests for Register, all tests for Deposit, etc.
        Names are still hard
        Still getting head wrapped around Event Sourcing
        Other ways to handle event application?
Learnings
    Pattern matching for if statements (with local variable of that type)
    Pattern Matching switch
    Sealed + Permits to support pattern matching
    Evident Data: in tests, showing clearly where the assertion came from, e.g., isEqualTo(20 -10)
        Helps tests be readable/understandable at a glance
Next Time
    Resplit PlayerAccountTest along commands vs. current command-event split
    Encapsulate Setup for PlayerAccountTest


Retrospective: Ensemble #123 (Fri Dec 15, 2023)
-----------------------------------------------
Thoughts, Observations
	Event sourcing - bloody hell!
	Don't quite understand event sourcing architecture
	Need to experience implementing it to truly learn it
	emit (JavaScript) = raise (PHP)
	Evident Data: e.g., assert that balance is 53 + 25 to make it easier to connect the assertion with the setup data
	Testing "at a distance" for testing the behavior at different levels of abstraction
	What tests to getting rid of the balance = (wrong) via new tests
		Finding tests to guide our implementation to event-sourcing not easy
		Letting the code guide tests
Learnings
	List.of() creates an unmodifiable/immutable List
	Aggregate can be state-sourced or event-sourced for storing state
		Choosing between the two types is mostly a business decision, but may be the default implementation if you have good support (team knowledge/framework)
		Refactoring Event Streams is not as straightforward
	All events coming from the database to reconstitute the Aggregate must be valid
	Commands Generate Events (if it's OK to do so—holding invariants) is fundamental to Event Sourcing
		Events Modify State, too
Next Time
	Split the current apply() into two methods for adding the event and executing the state change


Retrospective: Ensemble #122 (Fri Dec 8, 2023)
----------------------------------------------
Thoughts, Observations
    Drivers and Navigators communicate two-ways
        When N/D are unfamiliar communicate can be confusing
        Feedback from drivers is just as important as corrections from Navigators
    Liked the use of the word "emit" relating to events
    Use of "projection" for events to state
    Code feeds back into writing new tests
        TDD gives you almost immediate feedback when code is broken
    New navigator can always talk to the previous navigator!
    Make sure you know exactly why a test has failed
        So you can fix it properly!
    Separated tests into two parts: Commands->Events, Events->State
        Patterns of Event Sourcing — very different from State Sourcing
Learnings
    Records in Java
    Instanceof pattern matching without having to manually cast
    Switch pattern-matching coming
    Event-sourced events must be ordered by time
    Nested tests! +1
Next Time
    Reducing details from test method names to make intent more clear

Retrospective: Ensemble #121 (Fri Dec 1, 2023)
----------------------------------------------
Thoughts, Observations
	Starting something new, didn't require a lot of context/baggage.
	Event-sourcing is new for us!
		Nice to be able to do it, never having done it before
		Command objects vs. calling methods will be interesting
	Hard to figure out where to start implementing the event-sourced PlayerAccount, but liked where we ended up: TDDing rehydrating the PlayerAccount with events
		Liked the cognitive jump from sketching out the solution to our TDDing. Started thinking about the state, but how to "force" us to implement events
		Tempting to create the event hierarchy (base class) before we needed it
			Planning is useful, but still need to take small steps when TDDing
			Also the implementation of processing the events, no need for an "apply" method just yet
	Refactoring: adding explicit constructors to Record (a bit confusing) vs. convert to a class and then convert back to Record
	Inlining method: ensure the method (to be inlined) only calls public methods, not the field, to make sure after the inline, the caller has access to the method
		See inlining id()
	.arg helpful as always
	Deleting code (even test code!) can be difficult (loss aversion)
		delete! delete!


Retrospective: Ensemble #120 (Fri Nov 24, 2023)
-----------------------------------------------
Thoughts, Observations
	Discussion of mixing Test Code in Production Code: relaxing the "no test code in production" rule
		Original intent was not mixing test-based logic in production code, so why not put test values or substitutable test code in production code? (As per James Nullables)
	Extract new method and inline old to refactor return value
	Encapsulated Setup as a name for refactored test setup code
	Finally got rid of Deprecated place bets code!! 🎉
		Feature flag is removed
		We are really done!
	Looking forward to event-sourced PlayerAccount aggregate!
	IDs don't have to be longs (or numeric in general), but encapsulating them in a Value Object means it's easier to change in the future
	Rotation felt faster, even though only 1 fewer people (4 instead of 5)
		Perhaps because more drivers know their shortcuts?
		Fewer huddle pauses
	Being diligent about marking code as @Deprecated, and then searching for it to ensure we cleaned everything up helped a lot
Learnings
	.arg postfix


Retrospective: Ensemble #119 (Fri Nov 17, 2023)
-----------------------------------------------
Next Time
    Add @Nested for unit tests
    Maybe play with Modulith for the Player Management bounded context
    How to extract setup in com/jitterted/ebp/blackjack/adapter/in/web/BlackjackControllerTest.java:178
        Use GameBuilder?
Thoughts, Observations
    Finally getting to where we can delete deprecated methods
    Seeing more differences between pairing and ensembling
        Strong-style pairing
    Controller method is now tiny
    Transformation of Domain to DTO (Form) happens in the Form
        Which is in the Adapter
        This is a common pattern: DTO transforms Domain Objects to primitives (int, String, etc.)
    Inside the Hexagon, it's all Domain Entities and Domain Value Objects
        Speak in the language of the domain
    Spend the time to refine names after the refactoring
        Use the initial name for a bit before thinking about renaming
    Test code that tested both sides of the feature flag: didn't immediately notice that, but then only had to delete the "old" version
        Having them next to each other made it easier to notice
        Maybe using Nested tests
    We haven't had to deal with feature flags and database changes
    Using ""+int instead of String.valueOf(int)
    Finished the feature!
        Let's make lots of money
        RORA - Run Once Run Away

Retrospective: Ensemble #118 (Fri Oct 27, 2023)
-----------------------------------------------
Thoughts, Observations
	Don't apologize for asking to commit
		Either use mob next or explicit commit with a comment only if we think we might mess something up
	Refactoring to change return type of a method can be difficult to automate
	Liked how straightforward it was to onboard Clare
		Power of the Ensemble!
	Recognized we were perhaps going too far changing the player IDs from `int` to `PlayerId` and we stopped
	Nice to not feel like I'm the only one who doesn't understand the migration preview dialog
	BlackjackControllerTest: do we setup using the BlackjackController (using the NewGameForm) vs. more directly using the GameService
		It's a trade-off
Learnings
	Shortcuts!
		CTRL+T (mac) refactor menu
		CMD+SHIFT+ENTER completes the current statement/line
		More on the cheat sheet
	Introduce Parameter
		Changes parameter type
	`gst` shorthand for git status
	git diff
Next Time
	Do `mob next` more often


Retrospective: Ensemble #117 (Fri Oct 20, 2023)
-----------------------------------------------
Thoughts, Observations
	Disabled vs. keeping a test "red"
		Makes it harder to think about "are we green?"
		Could delete the test
			When it is rewritten, folks will learn a lot by having to create
				If it's hard to write, could tell you a lot about the state of the code
			Fighting loss aversion/sunk-cost fallacy
				"I hate it, so I have to try it"
			Or only limit WIP to one disabled test
	Lots of moving parts in the Spring MVC + Thymeleaf templates
		Two different "Forms": the HTML form itself (is a "view of the model") and the Form Object (DTO)
	Feature Flag
		Can use tools to manipulate the flags
			Can lead to misuse
		Branch in code vs. create branches in version control
	The application was broken for a while, because we hadn't run the application
	Happy to have Clare joining as Spectator!
Learnings
	Introduce Parameter as way to safely add a parameter to a method
	Use Stream<> as a Query method return type to indicate immutability


Retrospective: Ensemble #116 (Fri Oct 6, 2023)
----------------------------------------------
Thoughts, Observations
	Coding in C#, wasn't sure how to do it in Java
		Lean on the ensemble supporters for help
	Maps and the fact that they're not sorted by content nor by order added, as they're almost always HashMaps
	Treating the BlackjackControllerTest as an "acceptance test", and then how to test the inner layers
		Outside-in TDD
	How much Parallel Change (backwards compatibility) do we want/need
	We skipped the Zero case for BettingForm
Learnings
	Use add unambiguous imports on the fly, tune by excluding ones that should never be imported
	Using the correct assertThat for containsExactly vs. containsExactlyInAnyOrder
		Cheat sheet: https://ted.dev/courses/mastering-assertj.html


Retrospective: Ensemble #115 (Fri Sept 29, 2023)
------------------------------------------------
Thoughts, Observations
	Had lots of "luck" today: exposing random issues with WebConfigurationTest
		Got rid of all Disabled tests!
	Validating the incoming form for players playing: the form is responsible for doing that validation
	Thinking about how the UI will handle placing bets
		One big form for all players and their bets vs. looping through all players
		We're doing one screen multiple players
	PlayerId.of was nice to add
	Parallel change was good: allowed us to control what needed to change (instead of breaking a whole bunch of tests)
	Was nice that we already had a way to serialize the StubDeck to a custom-deck string (convertToString) for use in the BlackjackController
	Eradicating randomness can be hard (it can sneak up when unexpected)
Learnings
	How the HTTP form encoded message becomes a Form object in Spring
		The instance fields define the names of incoming parameters, not the containing form object


Retrospective: Ensemble #114 (Fri Sept 22, 2023)
------------------------------------------------
Thoughts, Observations
	Microservices are not a solution to the problem you think you have
	Single Point of Truth: placeBets boolean field duplicates information that we can infer from the playerBets List
		Prefer SPOT to DRY (don't repeat yourself)
	Who is responsible for converting those "unparsed" Strings to domain identifiers (PlayerId): Adapter or Service Layer? (It's Adapter)
		Domain Logic belongs in the domain, not in the Adapter
		Adapters can have logic, it's just UI or API or transformation logic
	Domain Entities must have IDs
		Even if they're not the Aggregate Root
			Game must have globally unique ID, whereas Hand needs an ID, but only needs to be "locally" unique (within the Game)
	Bounded Context vs. Aggregates
	After breaking down and discovering the "journey", figuring out where to start was interesting: wasn't necessary at the UI/Thymeleaf level
		Need to understand what we're implementing
		Thinking about where to start from a testing point of view
		Was straightforward to start testing against GameService with a new createGame() method
	Start with the least known, scariest, riskiest task first
Learnings
	Event Modeling -> focusing on the overall "customer journey"
		Boundary Objects
		Discovery


Retrospective: Ensemble #113 (Fri Sept 15, 2023)
------------------------------------------------
Thoughts, Observations
    Satisfying to get rid of the GameFactory and complete the GameBuilder
    Easier to understand the chained (fluent) builder methods than the long static factory names
    Builder names require iteration to settle on good names: requires discussion and consideration of tradeoffs
    Formatting weird: auto format was fine, but indentation was off for fluent builder
        Bug?
    Improving error messages when tests fail is always helpful to solve test failures
    Safe Delete "cascade deletions" to all methods in the graph that would no longer be used
    Inline Parameter worked as expected
    Ensembles allow for easier joining/leaving without work being interrupted
    Discussion flowed nicely
Next Time
    Might consider a builder .addPlayer() for when we need a player, but not its ID (or bet)
    Game placePlayerBets, etc. is a bit confusing, and playersInGame has Primitive Obsession smell


Retrospective: Ensemble #112 (Fri Sept 8, 2023)
-----------------------------------------------
Thoughts, Observations
	ID creation, don't use random, use something like (i+1)*n to avoid zero IDs
		Avoid duplicate ID
		Have stable IDs across executions
	Noticing when we get error messages that don't have enough information
		Fix them!
	Adding cross-checks/validations with good error messages to quickly figure out what's wrong
	Developer "ergonomics"
		Make mistakes hard/impossible to make
		Make the common things very simple, with little to no noise
	How far do we go to tidy up usages of GameBuilder factory methods?
Learnings
	Ctrl+Shift+J - "join lines"
	Drag-n-drop tabs into center
Next Time
	Tab Shifter plugin
	Can we remove placeBets boolean field and just look at size of playerBets list?

Retrospective: Ensemble #111 (Fri Sept 1, 2023)
-----------------------------------------------
Thoughts, Observations
	Negotiation between Driver<->Navigator for pairing
		Driver does whatever the navigator says, even if disagreeing
		Driver should generally understand what the Navigator's intent is
	Learning Ensemble is for "productive struggle" for the Navigator
		vs. in a Work Ensemble, other members are more vocal/active
	Kent Beck's "Tidy First?"
	Good practice refactoring to Test Data Builder
		How to refactor methods, staying in "the green", not breaking things ("in the red") for too long
	Sketching out the builder's API to provide a plan for the builder
		Put "what will it look like" in the comments where you'll write it
	Builder does most (all) of the creation in the "build()" method
		Builder's have instance fields to hold onto configuration
	Finding a balance for when adding characterization tests
		Prefer writing more tests is better than fewer tests
		If already covered, though, no need to write an explicit test
	Fun!
Learnings
	Cmd+Opt+T (Mac) Ctrl+Alt+T (Win) for Surround With (if statements, etc.)


Retrospective: Ensemble #110 (Fri August 25, 2023)
--------------------------------------------------
Thoughts, Observations
	"Ergonomics" of test data helpers
		Easy to use
		Hard to make mistakes
		Fall into the "pit of success"
	Refactor to build() for the GameBuilder from the GameFactory
		Extract full method, turn constructor into Factory method
	Sketched out what we wanted it to look like
	Can be hard to break it down into smaller steps, tried different things
	Lots to learn from refactoring a Factory to a Builder
		Good as a kata
	When all tests are passing, what are some "tidy up" steps we can do
		Tidy up the code you've just "finished"
		Check for warnings: try to get to "Green Checkmark"
	Name things to help with autocomplete
		e.g., playerOneId vs. firstPlayerId
	Create a "save point" commit before doing refactors
		"Before doing <scary/unknown thing>" as the commit message
Learnings
	F2 (and Shift+F2) to find next (previous) warning/error
		Look into the right gutter
	Git reset vs. Git revert commit
		For mob use, we want Revert Commit


Retrospective: Ensemble #109 (Fri August 18, 2023)
--------------------------------------------------
Thoughts, Observations
    Danger of using "mocks" when refactoring code, tests might not detect those changes
    Avoid using sequential numbers in tests, may mislead reader to thinking they must be sequential or that it's a relevant detail
    Testing too many properties of an object individually instead of comparing against known objects
    Tidying up: when to stop refactoring/tidying up?
        Don't nest changes too deep
    Took a while to load context of what we need to do
    Can be risky to modify code when a test is failing
        But that risk may be OK—it's a judgment call
Learnings
    assertThatNoException().isThrownBy() alternative
    Change Signature via create local variables, that then become parameters via Introduce Parameter
        IntelliJ will suggest removing (no longer used) parameters — that are replaced by the one being introduced
Next Time
    Navigators specify the SIDE (left/right) and LINE NUMBER
    Navigator picks the (random) number, instead of the Driver
    Make sure Player IDs are all using value object instead of int
Questions?
    When to introduce random to generate arbitrary numbers (into the setup) when they don't really matter? The assert still needs to match the setup.


Retrospective: Ensemble #108 (Fri August 4, 2023)
-------------------------------------------------
Thoughts, Observations
	Could there be some parameterizing of tests once we have a builder that makes it easier to create Games and Decks with parameters?
	Too focused on trying to get rid of deprecated method, not looking wider at where/how it was used
	Driver in a mob does what the navigator says, not as flexible to switch roles on the fly, vs. pairing
		Put ego aside, let navigator do what they think is right
	Overload method — Parallel Change — instead of changing the existing method
		Break only "one test" at a time
		Makes it more obvious that a Test Data Builder might be more appropriate than a Factory with lots of overloaded methods
	Lots of "busy work"
		But is necessary
	High-level vs. low-level directions
	Interrupting the driver to correct instructions, providing another way of phrasing your desire is how things work
	Necessary and unnecessary detail in tests
Learnings
	Cmd+P or Ctrl+P to view Parameter Information (instead of code inlay hints)


Retrospective: Ensemble #107 (Fri July 21, 2023)
------------------------------------------------
Thoughts, Observations
    Annoying to create games, how to make it easier?
        Introducing the PlayerId was cause of some of the pain
    Perhaps updating the GameFactory to use PlayerId and placePlayerBets first, instead of updating individual tests, would have been a better approach
    Phrase of the day: "sore thumb"
    Term of the day: "Mike List"
        (this is the structure popup Ctrl or Cmd + F12)
    In the green most of the time (except when we wanted to find out what is different)
    Use the opportunity of having to update tests to reflect on the test and perhaps rewrite from scratch
    Not having mobti.me disrupted the flow: unsure who's next, who's doing what, etc.
        You don't know how valuable it is until it's gone
    Split the editor on the left side to top/bottom to have the same view of the same file
        Tab Shifter has shortcuts for this
        vs. move the test methods closer together
    Old habits die hard
        reluctance to move methods around
        declaring all variables first
Next Time
    Self-host mobti.me


Retrospective: Ensemble #106 (Fri July 14, 2023)
------------------------------------------------
Thoughts, Observations
	Getting better at combining different refactorings (inline, intro param) — Refactoring Maneuvers
		Intro parameter to change the signature
	Not sure when to stop doing clean up
		Clean up = Refactoring
		Try spending 10 minutes more before being "done for now"
		It doesn't get better over time, it gets worse
	After refactoring tests, make sure they are still readable/understandable in ISOLATION
		When asserting, be thoughtful about why you're asserting it
		Don't remove asserts unless you know that behavior is covered somewhere
	Fix "sharp edges"
		Improving the InvalidBet exception to make it easier to understand why it failed
		PlayerCount vs. using an int
	Think less at first
		Try it, run tests, then think if you have to
		Save that thought energy
	Fast-paced, felt like a better session
Learnings
	Ctrl+` to bring up the switcher (especially Zoom)
	Kata to practice: code and refactoring, but DON'T use the mouse


Retrospective: Ensemble #105 (Fri July 7, 2023)
-----------------------------------------------
Thoughts, Observations
	Liked the Test Refactoring
		So much more readable, even a product owner could understand it
		Interesting how far you can take the refactoring
	Navigating/driving feels more comfortable after pairing for a while
		Tend to give higher level instructions
	We were in The Red for a while
		Noticing is the first step
	The refactoring of "I have a method that takes a list of one type, and I want it to be a list of another type" comes up and is not always temporary
	Creating arbitrary numbers to use in tests vs. sequential vs. random
Learnings
	Generics are ignored for overloading (etc.) in method signatures — Type Erasure
	Extend Selection! Ctrl+W and Ctrl+Shift+W for Windows
		Or just do Extract Method/Variable
	.fori postfix for indexed for loop
	Cmd (Ctrl) +Shift+Enter to complete the statement
	.toMap postfix (in the Custom Postfix Templates plugin)
	Learning "by heart" shortcuts, etc., to be able to stay focused on higher level thoughts


Retrospective: Ensemble #104 (Fri June 16, 2023)
------------------------------------------------
Thoughts, Observations
	I often didn't know what to do
	Discussion on pairing & mobbing was helpful
	Inlining of methods is interesting: it's easier to inline stuff and then extract in a better way
	"You can close PlayerId if you want"
	Parallel List as code smell
		Have an object that represents the pair (or tuple) of pieces of information.
		e.g.: PlayerBet = PlayerId + Bet
	(still) liked shorter turns
	Trying something out: "why don't we change the index and see what happens?"
		Experimenting
	Jumping to PlayerAccount instead of starting with PlayerId
		YAGNI
	More huddles
	Making low-level "engineering" tasks
Learnings
	Quick Definition - Option+Space or Ctrl+Shift+I


Retrospective: Ensemble #103 (Fri June 9, 2023)
-----------------------------------------------
Thoughts, Observations
	Took too big a step manually without running tests
		Felt unease
		Running tests then showed the change was wrong
		Try to change 1 thing at a time
		TCR can help
	Aggregate discussion
		Finding boundaries can be hard
		Realized that "Player" wasn't a "Global" Player, but really was part of Game and only makes sense to exist in a Game
		Renamed to PlayerInGame to make clear that it only exists in Game
	When naming or design is hard, it indicates that there's an underlying issue
		Can't always solve it, so leaving it as an "honest" name is a good step because it's obviously ugly
	Not being in the rotation (Spectator) changes your viewpoint
		Looking at other ways to contribute
		e.g., writing into chat
	Trying to get better at smaller steps
		It's a never-ending quest
	Good fun, as usual
Learnings
	Ctrl+Shift+I to preview (Option+Space) -> Quick Definition
	Type to narrow in various menus (Refactor This, Run Configuration)


Retrospective: Ensemble #102 (Fri June 2, 2023)
-----------------------------------------------
Thoughts, Observations
	Assigning multiple fields in a method: evaluate whether it's really different information, or if they're duplicated knowledge
		e.g., in Player: isDone & player's reasonDone
		Duplicate Data
		"Why" is there duplication?
	Optional indicating that not having any (having 0) is a valid and expected state
	Duplication: calling done() and then setting the reason
		Combined them
		Surprised when tests failed: ordering matters
	As a Spectator, was a bit hard to focus/engage
		Switching from Spectator to Participant meant wasn't "prepared"
		Thinking about the next step helps being engaged
	Liked shorter rotations
		Sometimes it feels really short
		Sometimes it feels like we're rushing to get things done
	Refactoring to get rid of recursion worked!
		More chaotic as we were getting direction and instructions from multiple people
		More "swarm"-like
	Navigator: "can you X when you get around to it?" 👍
Learnings
	Stream's flatMap()
		unwrap nested "collections"
		vs. map()
	Optional as a collection that holds 0 or 1 items
		Which means you can .stream() them
		Learning how it works
	Record conversion was a bit tricky because of the different named query method and field name


Retrospective: Ensemble #101 (Fri May 26, 2023)
-----------------------------------------------
Thoughts, Observations
	"Retarget Test"
		Do this often after extracting a new class
	When testing against Player, the Game isn't involved, so the Dealer isn't relevant
		A "micro-test"
			aka Solitary
	How to organize tests such that they're easy to find?
		"Mutation" and code coverage can help
		Very different from how production code is organized
		Separate test classes don't necessarily help (but can indicate the class is getting too large)
		Better test method (and class) names can always help
	Thinking about naming of the Game states
		Yes, it's a "new game", but is that what we care about? (No, it was that the bets hadn't been placed.)
	Looking at who is in charge of "recording" the PlayerDoneEvent
		Turns out it's Feature Envy and should be the responsibility of the Player
Learnings
	Using Extract Method to extract a Record ("Fixture") and then the method
		Hit ENTER while going through the refactoring process


Retrospective: Ensemble #100 (Fri May 19, 2023)
-----------------------------------------------
Thoughts, Observations
    Remember Ctrl+F12 (or CMD+F12) to see methods in current class
    Transition from Refactor to Behavior Change can be confusing
        Replacing Query (isGameOver) with State (using state transitions)
            Make State Machine explicit
    Domain knowledge is important
    playerStateChanged is still confusing
    3-minute rotation
        Liked it, felt more engaged, ensemble seemed to go much faster
        Liked it +1
    Liked "Never use != for Enums that represent state" (fine to use it during getting to green, but don't leave it)
    Tests are (Behavior) Change Detectors
        vs. "assuring quality" (w.r.t. regression tests)
    Tests can be wrong!
        Is the code wrong?
        Is the test wrong (outdated)?
            We wanted that change in behavior, so change the test to reflect what we wanted
Next Time
    Tab Shifter!
    Continue with 3-minute rotation
    Backfill (retarget) tests for Player (can't hit when busted, or when stood)


Retrospective: Ensemble #99 (Fri May 12, 2023)
----------------------------------------------
Thoughts, Observations
    When creating "bet" field on Player, could we have created the field public first?
    Introducing the game state with the betsHaveBeenPlaced
        vs. the potentially confusing looking at a single player's bet to represent all player's bets
            Which we're actually doing for "cards dealt"!
    Interesting conversation in what the next steps to take
    Parallel Change
        aka Backwards Compatible
    Take the time to read why the test is failing
Next Time
    Tab Shifter!
    Introduce enum for current state: from the "has bets been placed" boolean
    Visitor: can participate in chat, perhaps speak if not too intrusive
    Try 3-minute rotations?


Retrospective: Ensemble #98 (Fri May 5, 2023)
---------------------------------------------
Thoughts, Observations
    Conversation about Account vs. Hand with respect to Player Aggregate was interesting and illuminating
        DDD and Aggregate and Repository
    "Would you borrow line 28 to ..."
        Interpreted as a copy as the starting point that will then be changed
    Test arrangement: SETUP, EXECUTE, VERIFY
        vs. Given, When, Then, or AAA (Arrange/Act/Assert)
    Backseat driving in chat (vs. saying it out loud)
Learnings
    A bit about Event Sourcing
        Rollback/undo
        Audit trail
        Domain Events
            Broadcast/publish those events
            Analytics
        Projections
    CQRS's  (Command-Query Responsibility Segregation) splitting of READ paths vs. WRITE paths
        How it relates to Eventual Consistency
        Benefits: scale readers vs. writers separately
    Post Greg Young CQRS and versioning references to discord
        https://leanpub.com/esversioning/read
    HTMX
        Topic-oriented Ensemble
    Transactional Outbox pattern
Next Time
    Aggregate design for Game, player, and player account?
    What about Splitting/Double-Down considerations in terms of design
    Consider visitors


Retrospective: Ensemble #97 (Fri April 28, 2023)
------------------------------------------------
Thoughts, Observations
    All tests pass, ta-da! 🎉
    TCR doesn't work in all scenarios (like this one)
        Forces you to take smaller steps
        Five minute rotations feels like forever
    "Press Play" (means click the green button which runs the current test/run configuration)
    Test setup: Implicit Setup (using a "hidden" setup or before method) doesn't make obvious what's going on when looking at the test
        Isolation = We want "Understandable in Isolation"
    Driving an object (Game) to get to a state vs. "backdoor" loading its state.
    IntelliJ IDEA's extract method that also creates a record (2023.1 or later)
        When there's more than one potential return value
        (Since Java doesn't have deconstruction or multiple return values)
    Finding it hard to read numbers embedded in method names
        Parameterize first
        Then maybe builder
    Converted creation of decks from the old style to use the StubDeckBuilder
        Much more clear what the intent is
    Had fun today!
Next Time
    Persistence: snapshots, or event sourcing


Retrospective: Ensemble #96 (Fri April 14, 2023)
------------------------------------------------
Thoughts, Observations
    Display Name generator to replace camel case with spaces
    Made good progress on fixing tests
        Tedious, it was nice review existing tests and update to use StubDeckBuilder as needed
    There's repetition around creating decks and games
Learnings
    MindNode has duplicate document
    Double-click in the test list window to go to the failing test instead of looking for the stack trace link
    Playing around with test configuration settings
    Using TAB to complete (and overwrite) vs. ENTER that inserts and also leaves what was already there
        CMD+SHIFT+ENTER or CTRL+SHIFT+ENTER to Complete Current Statement
    Type Migration worked the way we wanted! StubDeck -> Deck in the StubDeckBuilder
        vs. Change Signature which didn't do what we wanted
Next Time
    Change the JUnit display name to be a full extension
    More domain-specific AssertJ assertions
        assert that game is over
    Create Game + Deck builder

Retrospective: Ensemble #95 (Fri April 7, 2023)
-----------------------------------------------
Thoughts, Observations
    When creating factory methods, what's important to specify and make clear (perhaps in the method name) vs. hiding the details
        What state are you testing
    Multi-step refactoring to change the signature
        Extract method with what you want, then inline the older one
    GameFactory started absorbing all the different cases
    We're refactoring tests while in the red
        Were intending to go back to green
        We were only modifying tests
        We were refactoring to factory method and then moving to factory class when the tests we were refactoring from were green
    Signature Shielding (aka Encapsulated Setup)
        sharing setup across tests (not sharing the state)
    Evolutionary Design of Encapsulated Setup sharing
        Factory Method inside a Test Class, Factory Class with a bunch of methods, then maybe Builder if too many variations (7-10) in the Factory class
    Communication: "can I suggest X" vs. "go do X"
    Navigator to Driver: bring the method on line 71 into view
        vs. runaway scrolling
    Good session


Retrospective: Ensemble #94 (Fri March 24, 2023)
------------------------------------------------
Thoughts, Observations
	Signature Shield for Test SETUP code to avoid the situation we're in where placeBets is required before initialDeal, causing 70 tests to fail
		Start by creating a single test method
		Parameterize the method to capture near duplicates
		Promote to static factory method in a separate class for sharing across test classes
		Make builder to handle other cases
	Refactoring within the enum was good: introduce field (init in constructor), introduce parameter (in constructor)
	placeBets before initialDeal was not previously required, but it should have been (Object Protocol)


Retrospective: Ensemble #93 (Fri March 10, 2023)
------------------------------------------------
Thoughts, Observations
	Triangulating by using different bet/payout amounts instead of different player outcomes
	Language is hard: payout? return? payoff? winnings? bet? placedBet?
		Payout
		Bet = placed bet
	Hard-coded String string in the View class, could have refactored (extracted) from the PlayerResultView and push into PlayerResult
	More hints that Bet probably belongs to Player (parallel lists, passing in Bet separately to PlayerResult, etc.)
	Nice example of exploring the feature, where we're not sure where the data comes from and who's responsible for knowing it
	Things are often more complex when you implement than when you think about implementing
Learnings
	.par and .arg postfix
	Custom Postfix Template plugin too


Retrospective: Ensemble #92 (Fri March 3, 2023)
-----------------------------------------------
Thoughts, Observations
    Good job going in small steps
    Good at backing out early when making a misstep
    Enjoyed the InvalidBetAmount refactoring
        Isolating the validation made it easy to add the 100 check
    Not clear how to effectively do the refactor from List<Integer> to List<Bet>
    Code Smell: Different Levels of Abstraction
        Look for indentation/nesting
    Ensuring integrity of Game: shouldn't update its state if violated the precondition
    Refactoring seemed to go smoothly even though felt like we didn't know where we were going
Learnings
    Records can't have private constructors (for factory methods)
    Record refactoring broken for converting constructor to factory method :(
    Parameterized test with ValueSource (ints = {})
    Assert isExactlyInstanceOf vs. just isInstanceOf
Next Time
    Gotta close the terminal window so IJ can update the files
    Driver try to avoid coding or making changes without Navigator's instruction
    Try TCR during refactoring
    Separate Ensemble for Kata
    Can placeBets be called twice? (no)


Retrospective: Ensemble #91 (Fri February 24, 2023)
---------------------------------------------------
Thoughts, Observations
	Getting more difficult to not write C# instead of Java
		=> (JavaScript) vs. -> (Java)
	Use more records
	Potential refactorings are interesting: State machine, State pattern, a missing concept for Players (for the different fields in Game)
	Primitive Obsession!!
		Adds meaning from the domain
		Feature Envy is often a symptom
		Will be interesting to see result after extracting PlayerCount
		Fix with new Enum, new Value Object, or new Mutable Type
	Refactoring hints
		Duplication
		Raise the level of abstraction
		Getting to same level of abstraction in a method
	Validation order in a method: validate arguments, then validate state/pre-condition (if necessary)
	Queries: Technical (.size()) vs. Domain (.count())
		if (bets.size() != playerCount()) { (from Game)
		Can indicate a missing Domain class (Primitive Obsession)
	Good discussions today
		Especially discussing about the domain
Learnings
	Records: especially the compact constructor
	Introduce Parameter Object refactoring
		can work on a single parameter


Retrospective: Ensemble #90 (Fri February 17, 2023)
---------------------------------------------------
Thoughts, Observations
    Bets as List<Integer> vs immutable domain Value Object
    "Chop the lines" to put fluent APIs on multiple lines
    Discussion around "Signature Shielding" interesting
    Primitive Exception Obsession
        IllegalStateException -> CardsNotDealt
    Moving placeBets "inward" was pretty easy
    Found (and fixed) latent bug in BlackjackController: ordering of initial deal + place bets
    Did some test clean up
        Nice!
        "background annoyance" to leave it
        "Cognitive Friction" to leave it messy and over-duplicated
    Just Try it!
        "Discuss in code"
    Start creating Classes from the test
        Sometimes changing an existing test is where you start (that's still TDD)
Next Time
    Next Driver: set up your editor tabs to match the current driver when the turn is up
Questions?
    How to save editor tab/split context in a file?


Retrospective: Ensemble #89 (Fri February 3, 2023)
--------------------------------------------------
Thoughts, Observations
    Added preconditions that didn't exist
    Sequence diagram in the beginning helped understand the flow
    Working outside-in is good for understanding how to implement things
    Noticed the BlackjackController was annotated as @Controller, but we were able to write PURE tests directly against it
        Makes TDD possible vs. writing framework/integration tests
    Talked about restructuring tests to be "higher level" and create abstraction around assertions
    Noticed some tests (GameTest) had artifacts of old code (deckFactory variable)
    Surprise: placeBets isn't on Game!
        placeBets needs to be refactored and pushed towards the center (Domain)
    Struggling with figuring out at what level to test
        Sometimes duplication is OK across levels/layers
        Don't ignore when it's confusing where tests should go: might indicate lack of cohesion (objects too big or too small)
    Learning how to work from the Ensemble
Next Time
    Precondition: require that all players place bets before taking any action
    Require number of bets placed matches number of players
    Tidy up GameTest
    Pick it up with refactoring placeBets to Game


Retrospective: Ensemble #88 (Fri January 27, 2023)
--------------------------------------------------
Thoughts, Observations
    Good to remind ourselves about POST-Redirect-GET pattern
    PURE (non I/O) vs. I/O tests
        vs. unit & integration
    Betting is a new "state" that the game is in, making the playing process more complicated
    First time experiencing touching the Controller-level code, it's nice but new/unfamiliar
    Ratcheting up the constraints for adding more assertions to a test (making it pass each time)
    Changing code to see what tests break was useful
        Helps find tests we might need to change
        Purposely changing code to (hopefully) have a test fail
    Broke less stuff than expected, but different from just breaking things and then fixing up
    After first test, we could have gone deeper into domain, but did "just enough" to go back to work on the outside
        "subcutaneous"
    Liked taking smaller steps with tests
    Too much copy-pasting, especially of large test code, can interfere with focusing on the minimum that's needed
        Sketching out the test with comments can help
    AAA = arrange, act, assert
        Setup, Execute/Command, Verify/Assert Query
        Given, When, Then
        Format the code accordingly: put blank lines between each section
    Confused and lost about how the posts, redirects, and gets
        Could have used a whiteboard
Learnings
    mob start -i (include uncommitted changes)


Retrospective: Ensemble #87 (Fri January 20, 2023)
--------------------------------------------------
Thoughts, Observations
    Mapping out a new feature was interesting
        +1
    Refactoring to extract lambda implementation to a top-level StubShuffler, then introduce parameter to the constructor of GameService
    First turn is always a bit disorienting, trying to load context into your head
    Finished the Random Shuffler! 🎉
        No more violations of Hexagonal Architecture
    Felt more engaged with a smaller ensemble


Retrospective: Ensemble #86 (Fri January 13, 2023)
--------------------------------------------------
Thoughts, Observations
    Using the "custom deck" string from the BlackjackControllerTest
        Avoids having two ways to pass in a Shoe to be used by GameService
    Took us some time to decide which extra constructors to remove/keep
        Much cleaner now
    Discuss in code vs. abstractly
    Interesting to see the introduction of the new Shuffler Port
    Multi-caret editing was fun
    Enjoyed it!
Learnings
    Show Type of Expression shortcut: Ctrl+Shift+P


Retrospective: Ensemble #85 (Fri January 6, 2023)
-------------------------------------------------
Thoughts, Observations
	Bridging the DeckFactory by refactoring the Shoe constructor (adding the decks() method)
	Replaced constructors for testing with static methods
	Imposing to start off the ensemble
		That feeling of diving into a completely unknown/new part of a codebase
	Everyone (mostly?) knew what's going on by the end
	Took a while to get rid of DeckFactory
		We did it!
		A lot changed, some risky steps (SSR)
			Would be a lot less comfortable if wasn't good test coverage
		Mostly because Tests used
	Can (still) take some getting used to lambdas, especially empty or "no-op" ones
Learnings
	Replace Structurally (when we couldn't see an automated refactoring)


Retrospective: Ensemble #84 (Fri December 16, 2022)
---------------------------------------------------
Thoughts, Observations
    Saff Squeeze
        Pull out the problematic code into a small test to more easily access the broken code
        Alternative to using a debugger
    javap for disassembling
    Sometimes we hold onto code that’s no longer needed
    Lambdas and how it “captures” external variables
        Practice Lambdas with Streams
    Exception naming: without the suffix “Exception” (ref. Kevlin Henney)
    When writing test code, think about “what do you want it to do?"
        TDD mindset: think about the object from the outside
Learnings
    Driver = “Smart Typist”
    When updating tests because of a change to production code, ensure that all the tests still make sense
Next Time
    Figure out how to get rid of DeckFactory.createForTest()


Retrospective: Ensemble #83 (Fri December 9, 2022)
--------------------------------------------------
Thoughts, Observations
	Good practice with Exceptions and testing them
	Design by Contract - “require” (pre-condition) vs. “ensure” (post-condition)
		We write “require” in our methods, and “ensure” with our tests
		“require” guard clauses are best if they’re at the beginning of the methods that they’re guarding
	Domain layer in Hex Arch isn’t required
		But if you have it, Domain must not access Ports
	Naming is hard
		Renamed Card Number to Card Order Indexes
		Trying things out > discussion
			“debate in code”
	Exceptions should have messages to prevent confusion as to what they’re really about
		Better: create domain-specific Exception classes
	Good vibe this session


Retrospective: Ensemble #82 (Fri December 2, 2022)
--------------------------------------------------
Thoughts, Observations
	Changed the test-only constructor to use a static factory method
	Started with too big of a step (all 52 cards), so reset and started with “One”
		Take smaller steps!
	Random numbers are “external state”
	Don’t use “A” and “An” in names of methods as they make it hard to read
	Parallel change (for the ShuffledDeck constructor)
		New way to create predictable deck
		“Feels” like we’re violating encapsulation
Learnings
	Learned about the Supplier pattern (in DeckFactory)
		Pass in a lambda to execute code upon .next()
		Or method handle
	Learned about IJ’s refactor to static factory method
	Learned more about Opt+Enter/Alt+Enter suggestions
	Ligature: love or hate?
		Editor Font checkbox
	Customizing the exclusions for auto-import suggestions
	TabShifter plugin


Retrospective: Ensemble #81 (Fri November 18, 2022)
---------------------------------------------------
Thoughts, Observations
	Went smoothly, no knowledge gaps
		Clear story of what we needed to do
	Was fun
	Was a bit unclear how to “fix” the HexArch violation of ShuffledDeck
		It’s not the ShuffledDeck that’s the problem it’s the Shuffling of the deck that needs to be in an adapter
	Refactored the signature to replace Deck with Shoe
		Felt clunky
		Could have created the Shoe lower in the call stack and introduced parameter
	Unclear how to integrate shuffling (which is hardware and belongs in an adapter) with Shoe or Deck, which are Domain objects
	Reduced indirection in the (now called) GameShoeTest, by getting rid of the GameService “middleman”.


Retrospective: Ensemble #80 (Fri October 21, 2022)
--------------------------------------------------
Thoughts, Observations
    Nice to be doing some complex refactorings
        And keep the tests passing
        And they failed when they needed to

    It’s easier to figure out what do to when tests are failing during a refactoring, than when we’re done (when tests pass)
    Where is the boundary of the work (similar to story splitting, how much is enough?)
    Clean up warnings can help
        Especially when they propogate
        Start with the innermost warning
    Breadcrumbs for cleanup, like @Deprecated
    Decided not to do the rename of the interface when extracting Deck.
        YAGNI?
    Game no longer deals cards from the Deck and now should deal from the Shoe
        Might be a fair amount of cleanup work to consolidate the relationship between Shoe, Deck, and DeckFactory
Learnings
    Learned about what a “Shoe” is


Retrospective: Ensemble #79 (Fri October 7, 2022)
-------------------------------------------------
Thoughts, Observations
    There’s “functional” code in our OO: command methods that return a modified version of the parameter (sometimes)
    Current design for refreshing decks is too complicated, so time to rethink design
    Good first experience.
    Happy to see IntelliJ fail sometimes (extracting interface).
    Yay for Shoe: adding a new domain term to hold our decks of cards
    Intro for new folks can take a bit of time
Learnings
    Change signature can be triggered by changing it from the call site: add the parameter from the caller and ask IntelliJ to fix it
Next Time
    Turn off code folding
    Navigators say: "Bring [name of method] into view"


Retrospective: Ensemble #77 (Fri September 23, 2022)
----------------------------------------------------
[no retro held: ran out of time]


Retrospective: Ensemble #76 (Fri September 16, 2022)
----------------------------------------------------
[canceled]


Retrospective: Ensemble #75 (Fri September 9, 2022)
---------------------------------------------------
Thoughts, Observations
    More of a “debugging” session (no debugger), more code less talk
    Simplest code that could pass
    Solving only the next problem, trying not to solve more problems than we had
    Felt weird to be in red for so long
    Making a seam isn’t always easy to find/create
        How much to parameterize
    Making the hypothesis for what’s wrong more clear
    Learning Ensemble vs. Work Ensemble
        Senior/Lead should hold back and let the Team Learn
    It was deck.size() after all!
        Danger of overriding behavior from the parent
        Overriding constructors can be less dangerous
    Too many constructors: confusing between what are tests using, what were for backwards compatibility
    Sometimes Ted is wrong
    More learning moments
        We had more problems to solve
Learnings
    Lambdas are Single Abstract Methods (SAM)
        == Single method interface (not default)

Retrospective: Ensemble #74 (Fri September 2, 2022)
---------------------------------------------------
Thoughts, Observations
    OMG so amazing: Push Out Factory refactoring (via introduce parameter)
    Starting to understand in my bones what Prepare Refactoring means
    Factories are stateless
    Appreciated time spent on explanations to understand things
    Try not to discuss as much, figure it out when we get there with real code
    Serendipity of seeing something else that can trigger alternatives
    Can be hard to change direction
    When not driving, felt disconnected from the Ensemble
Next Time
    Drivers: try not to move/scroll around code without navigation (or move mouse and hover)
Questions?
    How to implement DeckFactory.createDeck() in Tests with StubDecks?


Retrospective: Ensemble #73 (Fri August 26, 2022)
-------------------------------------------------
Thoughts, Observations
    Didn’t write much code, did more Big Picture thinking to figure out how to handle fixing deck-runs-out-of-cards bug
    Prefer to “ration” the clean up
        Felt like more clean up than want to do in single session
    Satisfying to write the test
    Prefer to have written more code
        Dopamine hit of making progress
    3 weeks since last session is a long time
        Nice to see everyone!


Retrospective: Ensemble #72 (Fri August 5, 2022)
------------------------------------------------
Thoughts, Observations
    Some people like to understand why things work, others just accept that if it works, it works
        Depends on how much depth of expertise you’re trying to build
    Interesting how different the steps were than other times a similar code change was made
        Worth experimenting to see what happens instead of assuming
    Felt really rusty after so long since last ensemble
        Had setups wrong!
    Really fun
        Enjoyed it
Learnings
    Really understand lambdas, now that we saw the anonymous class implementation
        Consuming lambdas less often done than creating/passing in lambdas
        Use IntelliJ IDEA to expand the lambdas
    Refactor to Static Method
Phrase of the Day
    Syntactic Sugar


Retrospective: Ensemble #68 (Fri July 8, 2022)
----------------------------------------------
Thoughts, Observations
    Interesting to see the “other timeline” (Ensemble)
    Navigator intent-level instructions “Disable the test however you like”
        As the Driver, I appreciated it
        Comment out @Test vs. explicitly disabled/ignore, if no other tests are disabled, then @Disabled is preferred
    Would be nice to have a “linter” to mark methods in test classes that are non-private, but don’t have @Test annotation
    Was interesting to find that we already had an isGameOver() query method and didn’t need a new one (as originally thought)
    We don’t refactor-organize tests enough
        How do/should we organize tests: along what dimensions and according to Given, When, or Then?
        A result of evolutionary design: we organize the code well, but need this for test code
        Need consistency of where tests go, how to organize them
        (This is a bigger issue when you have multiple tests per prod code)
            Can lose some certainty that everything is covered?
        A danger during refactoring is that you’ve created new behavior that isn’t fully tested
Learnings
    In “find class” dialog, hold Shift+Enter to open the selected class in a pane (group) to the right of your current pane (group)
Next Time
    Use @Disabled instead of commenting out @Test


Retrospective: Ensemble #67 (Fri July 1, 2022)
----------------------------------------------
Thoughts, Observations
    If this were “real work”, we’d be more “just make the change”
        And run the tests
    As a Learning Ensemble, it’s good to try out different things to see what works
        It’s how we learn these skills
    We seem to use "Refactoring" to mean automated refactoring (vs. changing code manually that doesn’t change behavior)
    Because we have pretty good test coverage, refactoring is much more comfortable
    Seeing where the refactorings lead to is hard
Learnings
    From the Adapter, Commands must go through the Application Layer (“Service”). Queries can hit Domain or Application Layers.
    Color in Suit is an Attribute of the Suit (Domain concept) vs. how it’s displayed in the Adapter.
        Even though Color is not used Behaviorally.
            Could look like Feature Envy otherwise
        Does the Adapter have all the information it needs to interpret/transform the Domain to present to the world?
        Fairly subjective whether Color needs to be in Suit or can be purely up to the Adapter to interpret.
    Change Signature automated refactoring
    Redo (opposite of Undo)
    Refactor: Find Duplicates and Replace


Retrospective: Ensemble #66 (Fri June 24, 2022)
-----------------------------------------------
Thoughts, Observations
    IDEA needs code folding per project
    Hard to tell the difference between existing method and unparseable code in IDEA
    Fixing flaky test — if it’s easy enough, just do it right away
        Otherwise put an explicit fail() in it so you don’t lose track
    Love readability of custom domain assertions
        Hard to write and reason because it just looks like other assertThat(), but it returns HandAssert, GameAssert, etc., given the Hand, Game, etc.
        Internal implementation of AssertJ assertions is not easy to wrap your head around
    Seeing a step to reuse code
Learnings
Next Time
    Try to be more strict about runaway Driver
        Can always remind Driver to slow down/stop


Retrospective: Ensemble #65 (Fri June 17, 2022)
-----------------------------------------------
Thoughts, Observations
    Hard to multitask in an Ensemble
    Doing TDD can be slow, but the payback is big
        When all the little steps are done, it’s DONE.
    Remembering to take baby steps
        Don’t forget to make the test pass before moving on to the next step
        Especially when things are very new and/or complex
    Interesting to look at AssertJ generator
        Too much the first pass
        Put the generated code in a separate package (after making a mistake)
        “bootstrapped” ourselves to get things started
            Didn’t need to fully understand how all of the code works
        Experimented: judge based on “did we reach our goal” (of more readable test)
            A form of “argue in code”
            Need to finish the experiment before judging
        Since the assertions hide details, have to ensure those details are correct
    Can’t wait for next time!
Learnings
    assertThat…very readable, fluent


Retrospective: Ensemble #64 (Fri June 10, 2022)
-----------------------------------------------
canceled


Retrospective: Ensemble #63 (Fri June 3, 2022)
----------------------------------------------
Thoughts, Observations
    Seems like a lot of state with if statements, is there some pattern that could minimize or centralize it
    Wrote tests that failed, setting up the next navigator to fix them
    No idea why we wrote a test that turned out to be the opposite of what we wanted
    Three people are much more engaged and intense than more people
    Strict Navigator vs. jumping in, keeping things more loose
    Not very much “new” code this time around
    Made me feel better after a tough week
Learnings
    CTRL+F12 (CMD+F12) for showing methods in current file (where the caret is)
Next Time
    Custom AssertJ domain-specific `assertThat`s
Phrase of the Day
    “Grab first two cars of the train”


Retrospective: Ensemble #62 (Fri May 27, 2022)
----------------------------------------------
Thoughts, Observations
    Seems like a lot of state with if statements, is there some pattern that could minimize or centralize it
    Wrote tests that failed, setting up the next navigator to fix them
    No idea why we wrote a test that turned out to be the opposite of what we wanted
    Three people are much more engaged and intense than more people
    Strict Navigator vs. jumping in, keeping things more loose
    Not very much “new” code this time around
    Made me feel better after a tough week
Learnings
    CTRL+F12 (CMD+F12) for showing methods in current file (where the caret is)
    Manually initiating the "Process Duplicates" from the Refactor menu (#8!)
Next Time
    Custom AssertJ domain-specific assertThats
Phrase of the Day
    “Grab first two cars of the train”


Retrospective: Ensemble #62 (Fri May 27, 2022)
----------------------------------------------
Thoughts, Observations
    Liked 7-minute rotations
    Using a comment as a breadcrumb to get information out of our head so we can focus on something different
        Can also use chat to hold information
    Fix the immediate problem/issue in front of us, then can focus on larger issue later
        Not to be used to avoid the bigger issue
Learnings
    Move Instance: Escalate Visibility option
        No need to change the visibility of the method before moving it
    For each can replace the iterator
    Alt+⬆ and ⬇ (Ctrl+Shift+⬆/⬇ on Mac) to move next/previous method


Retrospective: Ensemble #61 (Fri May 20, 2022)
----------------------------------------------
Thoughts, Observations
    Been a long time since I’ve done OO work
        Thinking about boundaries and responsibilities of classes, etc.
    Extract Parameter for constructor was wizardry
    Refactoring with respect to a specific boundary: which boundary are we thinking about?
        Where should we start this next change?
    Let’s just delete something and see what breaks - lean on the compiler to find out what to adjust
        vs. refactoring
            and small, SAFE steps
    Slower: more thinking about the way things are structured
        Felt like a bit too much discussion
            Was unsure what to do next
    The “wall” that we hit was the one that came up during discussion
    In Controller classes, you want little to no logic (if statements)
        Also no Domain state (it’s a service)
    Weren’t sure about “how” the Deck Factory would be “programmable”, so we just started coding — so far we didn’t need it to be programmable
    GameService constructor: unclear who should be responsible for “new Deck()”
        What’s the right boundary for creating decks?
        Relates to the (future) problem of: what if we run out of cards?
        Inconsistency: controller? game startup (bootstrap)
Learnings
    “View Usages” (CTRL-B, CMD-B)
    Expand/shrink selection
Next Time
    Rename imSorryReallySorry test method


Retrospective: Ensemble #60 (Fri May 13, 2022)
----------------------------------------------
Thoughts, Observations
    Didn’t always Predict test failures
        Only if changing behavior
        Refactoring must pass (by definition)
    We were wrong that we could specify the deck in the Application startup: we don’t know the number of players at that point
        Doing the simplest possible thing can help shine a light on what needs to be done
        Start from the outside, to ensure it CAN actually work
    Hex Arch boundaries helps clarify where code goes: e.g., where do we parse “A,8,K,2”? In the adapter.
        Potentially in a Factory in the Application layer
Learnings
    Refactor to Static
Next Time
    Refactor to split domain into domain vs. application
        Service and elsewhere?
        Need to move mapping of Enum to String out of the domain


Retrospective: Ensemble #59 (Fri May 6, 2022)
---------------------------------------------
Thoughts, Observations
    Fun!
    IntelliJ “if” refactoring
    Thinking of how to implement it
    Used the Application test to help drive us and verify assumptions
    Small steps
        Be careful extracting method names with boolean expressions, can sometimes invert unintentionally
    Prefer switch over if
        Prefer Strategy over switch
    IntelliJ: trust, but verify (if reordering/refactorings)
    I thought we’d get this done this session! 😄
        Decisions can take time
        Unknowns about @Value
    Vocalizing high-level concepts and intentions really helps during hand off
Learnings
    Add braces context options
    Extract if subexpression
    De Morgan’s law of boolean algebra
    Default for @Value using colon
    Not having @Value config throws exception not null (if unspecified)
Word of the Day
    Pudding

Retrospective: Ensemble #58 (Fri April 29, 2022)
------------------------------------------------
Thoughts, Observations
    Nice to do Extract to Enum (via extract delegate)
        Too bad it doesn’t fix everything everywhere
    Refactoring to enum was not as smooth as we thought, but had rough edges
        Exposed violation of Hex Arch
        Strings in domain classes (like Enum) is a “hidden” (subtle) violation of direction of dependencies in HexArch
    Forgot other observations
    Noticed that a method in a test class wasn’t great—had to keep looking at its implementation
        Hard to evaluate verbally, writing them down to visually compare helped
Learnings
    Parameterized tests were cool
        Too bad @EnumSource wasn’t good enough
    EnumMap instead of HashMap
        For Enums as Keys!
Next Time
    Describing ways for Navigator to tell Driver where on the screen something is
Word of the Day
    Blarg

Retrospective: Ensemble #57 (Fri April 22, 2022)
------------------------------------------------
Thoughts, Observations
    Learn more about the Domain (ubiquitous language), especially as we get into edge cases
    Nice to have builders and tests with Domain language
    Multiple constructors can get really confusing, especially with the lambdas
        Lambda matched two completely different interfaces (GameRepository and GameMonitor)
    Navigator provided high level intent of “grab two asserts from previous test” rather than detailed instructions
        High level instructions are faster than lower-level (detailed)
    Noticed when we didn’t Predict test outcome
    FINALLY FINISHED DEALER BLACKJACK FEATURE!!!
        Only took a year or so
Learnings
    Push constant out: refactor by introducing parameter from a constant (e.g., “1” for number of players in the Game constructor)
    Replace Lambda with Method Reference (IJ hint)
    IJ waits to refresh files until you focus an editor or exit the terminal
Next Time
    Play the online multi-hand blackjack game
    Turn off Editor > Inlay Hints > Code Vision
        Bug filed?

Retrospective: Ensemble #56 (Fri April 15, 2022)
------------------------------------------------
Thoughts, Observations
    Fun!
        Even though we made honest mistakes
    Lots of honest (i.e., long) method names
    Took smaller steps
        Can’t always, but thinking about it more often
    Game constructor problem bites (again?)
    Is Game getting too big?
    PlayerStateChanged is complex
    Sometimes you have to use the debugger
        Test was set up incorrectly!
Learnings
    Show methods in current class: CMD+F12/CTRL+F12
    Amend Commit
    Cohere Method - cause to be coherent with the rest of the class
        is a Fix for Feature Envy


Retrospective: Ensemble #55 (Fri April 8, 2022)
-----------------------------------------------
Thoughts, Observations
    Sorry about runaway driving
    Happy with the refactoring away from Decorator
        +1
    Happy we tried the Decorator
    Why not both? [insert meme]
        Turned out we did use both: a Constant and Extract Method
    Paying more attention to names of refactorings
        IntelliJ IDEA’s names are sometimes different from Fowler’s Refactoring
        Using names to communicate better
    7-minute cycles were comfortable
    Deleting stuff is great!
        +++
    No longer scary to not know what we’re going to do next
    Perhaps we should have started at the outside first instead of diving into writing a GameTest
Learnings
    Getting hungry
    Sleepy not good
    If you don’t use return value from a method (IDEA suggestion), IDEA will ask if you want to Remove or Transform — transform keeps the “side-effect”
Next Time
    Remember to start from Outside for new functionality


Retrospective: Ensemble #54 (Fri April 1, 2022)
-----------------------------------------------
Thoughts, Observations
    Simulating the “real world” vs. the domain in the code
        e.g., no need to set all Cards to be Face Down in the Deck
    Feels more “domain-y” by embedded the Face Up/Down state in the Card itself
    Taking small steps to refactor
        Keeping tests passing/compiling (“staying in the Green”)
            vs. making a change and having 5 things break (don’t compile)
    Hard to think in Booleans!!
        Are you sure you want to use a boolean?
    Use boolean parameters with a readable name instead of true/false
    Liked refactoring away from Decorator
    Refactoring with respect to a boundary
        DealerHand = Refactor, Card = new behavior (flip method)
    Refactor to Enum via automated refactoring
        Being OK with making a mistake - trial & error
            Because we can! (And that’s why we’re here)
            Easier to throw away code if you’re taking tiny steps
    Nice hand-off between Navigators
    Reorder tests: yes, we care about the order of things!
Learnings
    Keyboard shortcuts!
    IntelliJ stuff
Next Time
    Code-folding for single line method: turn this off
    Navigator too low-level (click, type this character)
    Reminder: Driver ask for shortcut if they don’t know it

Retrospective: Ensemble #53 (Fri March 25, 2022)
------------------------------------------------
Thoughts, Observations
    Interesting to continue with the decorator way of working
    Some fun issues with expectations in tests
    Trying things out (when you’re not sure) is fun
    Interesting to jump in to an experiment in-progress
    Joy at seeing failures
    Folks called for “huddle” freely
    Test wasn’t correct, was eventually caught
    Just because all tests pass, even with TDD, doesn’t mean everything works as it should
Learnings
    Seeing how Decorator is awkward
        Led us back to that “face up” is a Domain issue
    (Domain) Learned that the Dealer flips their Hole card over when they start their turn
Next Time
    Non-decorator way to do it


Retrospective: Ensemble #52 (Fri March 18, 2022)
------------------------------------------------
Thoughts, Observations
    Not sure about implementing the (empty) decorator first not driven by the domain?
        Make existing code work (prepare refactoring)
            Should have deleted the override first
        Driving from outside-in might have been more clear?
            We explicitly wanted Decorator solution
    Instead of implementing one by one when test failed, delete methods and use Delegate Methods to implement
    Liked the “line 20 1/2” directive [for navigation]
    Like the huddle
    Not thrilled with FaceUpCard as a name?
        It’s in your face
    Happy with new folks!
    Enjoyed trying the Decorator pattern
Learnings
    Delegate methods automated refactoring


Retrospective: Ensemble #51 (Fri March 11, 2022)
------------------------------------------------
Thoughts, Observations
    Hard after being away for a week
        or two
        Being the driver helped get bearings
    Dislike/frustrated not knowing the long-term path
    Didn’t understand what the later problem actually was, until we hit it
    Liked that we “sketched” out the code ideas to make it concrete
        Discussing in code
    Didn’t like 7 minutes per turn as much, but could be because frustrated by not knowing where we were going
    Despite discussion about options the prior week, it turns out the one we selected didn’t really work once we coded
Learnings
    Know better what an Acceptance Test is
Next Time
    Try 7 minute (for small group) again
    If you’ve been away, be the Driver


Retrospective: Ensemble #50 (Fri March 4, 2022)
-----------------------------------------------
Thoughts, Observations
    Got bitten by “simulate” vs “model” the real world issue
    Like how test is serving as documentation
        Exploring how big a test should be — it was larger than we might normally do, but favored one test for documenting
    Exploring in an Ensemble is a great place to discuss issues, especially those that are outside the “norm”
        If it were in a P.R., it might be rejected, or have lots of back-and-forth
        Danger of Guidelines becoming rules without forum for discussion
    Longer rotation time for smaller group seemed good
    Nice to discuss pros/cons for (a plan for) solving the “Dealer Face Down Card” issue
        Coming up with at least 3 choices
        Thinking about the choices in the context of DOMAIN Modeling and where the boundaries are
        Evaluating based on Domain vs Adapter, and Value Objects
            Immediately rejected “let the Adapter do it”
Next Time
    Maybe try 7 minutes instead of 10 minutes for small groups


Retrospective: Ensemble #49 (Fri February 25, 2022)
---------------------------------------------------
Thoughts, Observations
    Often there’s a way to use automated refactorings to do a composite (larger) refactoring, instead of manual refactoring and leaning on the compiler
    Smaller Ensemble (with 3), much more intense, faster paced
        Maybe use a break
        Longer cycles?
            Until Green?
    Explored more in terms of refactoring and looking for duplication
        Partial duplication with the if(queue not empty) vs. while(queue not empty): seemed odd and revealed a bug
    Noticing some places where couldn’t follow Ted’s thought process
    Forgetting some of the “tools” to use
        Deliberate practice
Learnings
    Change Signature to swap parameters
    postfix “.for”
    Select multiple parameters for Introduce Parameter (creates array)
    Refactoring to convert array to var args
        Remember varargs at the end
Next Time
    For 3 ppl, try 10 min cycle



Retrospective: Ensemble #48 (Fri February 18, 2022)
---------------------------------------------------
Thoughts, Observations
    Enjoyed different approaches to refactoring +1 +1
        Different from what I had in mind
    Coming back after a break was surprisingly easy
    Didn’t stop to think about alternatives
    Can we control “propagation” of errors
        Can I figure out a way to do this and run tests after each step
    Almost a year of this!
    More able to mentally visualize Composite Refactorings
Learnings
    Using `private` to figure out which methods were still using the method (leverage/leaning on the compiler to show you where you need to fix things)
    Action Search (Cmd+Shift+A, Ctrl+Shift+A)
    Postfix `for` on collections to generate the for loop
    Ctrl+Y (not “eye”) delete current line (Cmd+Del)
Next Time
    Do an explicit commit before doing a non-trivial refactor


Retrospective: Ensemble #47 (Fri February 11, 2022)
---------------------------------------------------
Thoughts, Observations
    Prepare Refactoring to prepare for multiple player hands
    Copy-n-paste ignores formatter:off
    Test Data Builders are fun
    Getting a bit complicated with the deques and lists and bears
    The 2 literal was mistaken for number of players, when it was the number of cards for an initial deal
Learnings
    formatter:off/on
    Surround with Ctrl+Alt+T (Cmd+Opt+T)


Retrospective: Ensemble #46
---------------------------
[canceled]


Retrospective: Ensemble #45 (Fri January 28, 2022)
--------------------------------------------------
Thoughts, Observations
    Going last felt harder, having to follow what came before
    Struggled—knew what was wanted, hard to find the next smallest step to get there
        Knew the output, how to test-drive
    Different kind of work than the usual “domain-driven” work
        Also satisfying
    Seeing and getting hands-on in a different kind of builder
    Excited to do test builder
    Surprised that List knows how to toString() itself
    Subclassing and having the cards reference confused as to where it was defined/saved/used
    Prepare refactoring seems like premature refactoring
    Look at the code
    Form hypothesis of why test is failing
    A bit of getting lost what Navigator wants to see vs. what Driver is showing
    Delaying extracting Deck to a proper interface resulted in a bug with the StubDeck constructor (List<Card>)
Learnings
Next Time
    Assume Run Just Unit tests by default, unless otherwise specified
    Drivers pay attention to scrolling and controlling what’s in view

Retrospective: Ensemble #44 (Fri January 21, 2022)
--------------------------------------------------
Thoughts, Observations
    Working outside-in was more comfortable
    Got a better sense of when to add functionality vs. stepping back and refactoring
    Test closer to the class
    Take smaller steps
        Even by hard-coding a value!
            +1
    Noticing Primitive Obsession: PlayerId
        As well as “reason done” should be an enum
    Noting where we use Strings (Adapter) and not (Domain)
    PlayerId vs. Id, depending on context
    Finished Events on the UI!
        +1
    Easier to start from the view
    Very smooth
    Don’t fight indentation — just do it, and reformat after (Cmd+Opt+L / Ctrl+Alt+L)


Retrospective: Ensemble #43 (Fri January 14, 2022)
-------------------------------------------------
Thoughts, Observations
    Domain is concrete — closer to the physical world, makes it easier to understand
    So Excite: see outcome and cards for multiple players!!!
        +1
    What was that bug?!?
    Multiple turns without writing code
    Changing TEST before changing CODE
    Extra effort to make test fail before making a change to the code (player outcome)
Learnings
    jps (Java Process list)


Retrospective: Ensemble #42 (Fri January 7, 2022)
-------------------------------------------------
Thoughts, Observations
    Dynamic of 3 people felt very different
        Seemed easier to “pipe up"
    Got rid of getPlayers()! Finally!
    Discussion points were few and fast
        Maybe shorter because fewer people - faster sync
    Delayed for PlayerResult passing in Player in the constructor instead of individual pieces
        Nicer to pass in PlayerOutcome instead of propagating Dealer Hand - made testing easier
    Good discussion highlighting the “current player” methods weren’t well named and protocol not being enforced
Learnings
    ALT-DEL (Safe Delete) CMD-DEL
    CTRL-E (Recent Files)


[No Ensemble #41]

Retrospective: Ensemble #40 (Fri December 24, 2021) 🎄
------------------------------------------------------
Thoughts, Observations
    Nice Precise Predictions
    Incorrectly setup test was fun to figure out
        Bitten by too many overloaded Game constructors
        Narrow down hypotheses for cause of failure
    Could have finished the Thymeleaf template before refactoring to remove getPlayers()
Learnings
    Ctrl+Shift+I (Windows) or Opt+Space (Mac) - “Quick Definition” - preview of implementation
    Shift+Shift
        Use more precise search, e.g., Ctrl+N (Cmd+O) for finding a Class
Next Time
    Turn off Code Folding
    Try to run tests before joining Ensemble


Retrospective: Ensemble #39 (Fri December 17, 2021)
---------------------------------------------------
Thoughts, Observations
    Navigating via low-level instructions (shortcuts) instead of desired outcome/intent
        Start with intent
    Conversation around parameters, coupling, “client/consumer burden”
    Queries snapshot point-in-time information and return should be immutable
    Different levels of “paranoia” around testing
        Judgement Premise
Learnings
    Highlight Usages in File shortcut: something something F7
        Use with F3 or Cmd+G to find next usage
Next Time
    IDEA Font size >= 16


Retrospective: Ensemble #38 (Fri December 10, 2021)
---------------------------------------------------
Thoughts, Observations
    I’m still going to fast and not taking time to think. Runaway driver. Jumping to solution.
        +1 :(
    Away from mob, though seemed easier to jump in
    Sometimes hard to see smaller steps
    Determining actual source of problem before trying to solve it
    Figure out what needs to be tested vs. what’s already tested (GameOutcomeView vs. PlayerOutcomeView)
    Liked cleaning up names of things
Learnings
    Prefer code duplication across Adapters — risky to “share” code: changes to behavior in one would change the other, probably unintentionally
        Adapters should be isolated
        Blame obsession with DRY
    F6 Move Static Method can create new class (and move multiple methods at once)
    Ctrl-T “Refactor This” menu
    Turn on soft-wrapping in console
    Find Action: Ctrl+Shift+A
Next Time
    Careful: wait to “steal screen” until after driver does “mob next” (confirm it is done)
    Navigator should stay at high-level instructions, unless Driver asks for more help
    Review past Retrospectives
    Drivers: don't run tests until you hear a Precise Prediction

Retrospective: Ensemble #37 (Fri December 3, 2021)
--------------------------------------------------
Thoughts, Observations
    Try to understand the true cause of the error message
    What is TSTTCPW (The Simplest Thing That Could Possibly Work) to make the current test pass
        Minimum requirements of the test
    Enjoyed refactoring via tiny automated steps
        +1
        A new way of looking at the approach
    Moving constructor code into a static method for transformation of Domain to DTO/View
    Move Method refactoring: just type the existing class and IJ will autocomplete package
    Fun session
    Making the test more obvious: e.g., inline factory method to visualize the work
        Made a mistake later (somewhat) easier to find
    When confused: check assumptions, e.g., test setup
        One of the hardest things to do
    After spending a lot of time in one class (like Game) to “switch mental model” to focus just on Player
        Leads to wrong assumptions
Learnings
    Refactor This is context-sensitive: depends on where your caret is
    Ctrl+Shift+F7: Highlight usages (at caret)
        Try it out on different things!

Retrospective: Ensemble #36 (Fri November 26, 2021)
---------------------------------------------------
Thoughts, Observations
    That was unsatisfying. (but necessary). Discovered we needed something else to be done first.
        We learned something, but didn’t finish any functionality. +1
    Spike showed us that there was something missing before we could continue — unexpected. We didn’t learn what we thought we would.
    Experiment by breaking things and trying to fix them. And learned things.
    Understanding how “deep” the test should be asserting (e.g., we don’t care about individual cards, just that they have 2 cards). What might break?
    Lost focus on UI, but it’s necessary
    Instead of fighting the iterator, initialized it later in the process
    Should initial deal be part of constructor?
        Is Game truly in a valid state prior to initialDeal()?
    Even when experimenting, paying attention to WHY tests are failing can show missing functionality, or change thought process.
Learnings
    Collection.removeIf() !
    Let IntelliJ teach (or surprise) you
    Preview implementation Opt-Space /  Ctrl-Shift-I
    Yes, you can inline library code
    Show only failing tests by unchecking “Show Passed” in run tests toolbar
    Surround With: Cmd+Opt+T / Ctrl+Alt+T
        Just templates: Cmd+Opt+J / Ctrl+Alt+J

Retrospective: Ensemble #35 (Sat November 20, 2021)
---------------------------------------------------
Thoughts, Observations
    Look at code before prediction — passed when prediction was fail
    Determining whether/how a player was done based on the “reason done” String, instead of another abstraction (enum, or state)
    Saturday “morning” seems to be much rougher than Friday morning +3
    Confusion around renaming of methods in the SingleStubDeckFactory to clarify dealer options +1
        Before it didn’t matter, now it matters
        Good job looking at usages
    Still some language issues around terminology of “completed” “active” etc.
        Can’t really look to the “problem domain” for terminology
    Like that we’re refactoring and experimenting ways to improve the ‘playerStateChanged’
        Experimenting without fear
    Raised level of abstraction for asserting dealer took (or did not take) their turn
Learnings
    Code Folding - Collapse/Expand shortcuts (Cmd+Shift+Plus/Minus) +1
    Cmd+F12  (Ctrl+F12) show file structure as a popup
        Cmd+7 (Alt+7) for the Structure tool window
Next Time
    Call for a Huddle when struggling too long
    Scan the code and mission before the mob
        but don’t become wedded to your ideas
    Ted drive while ensemble experiments
    Assertion stuff
        Test data builders
        AssertJ custom domain-specific assertions
        Static Dealer assertion class

Retrospective: Ensemble #34 (Fri November 12, 2021)
---------------------------------------------------
Thoughts, Observations
    Easy stuff at start was nice
    Fun!
    Good discussion clarifying language (active -> standing player) to evolve +1
    Decks are getting confusing to build - time for Test Data Builder
Learnings
    Refactoring to “put condition inside method” via Extract + Inline + Rename +1
    CamelHumps setting in IntelliJ IDEA +1
    Ctrl+D (Cmd+D) duplicate line or selection
    OpenRewrite for offline refactoring +1
Next Time
    Keep test window closed when all tests pass

Retrospective: Ensemble #33 (Fri November 5, 2021)
--------------------------------------------------
Thoughts, Observations
    Like how we focused on Precisely Predicting how tests should fail, helps ensure understanding of code
    Liked coming to a new way of indicating which tests to run: “All” for All Units tests and “Unit Tests” for just unit tests
    Happy we’re exploring alternative ways to solve problems (e.g., non-recursive approach)
    Why do we dislike recursion??
        Can be harder to reason about
        Method might be a bit long to be recursion
    Liked the suggestion to review Retro goals
    Reducing verbose test method names, especially dropping where the name came from the test class name
        Sometimes think at higher-level/more abstract
Learnings
    Concept of “argue in/with code”
    Shortcut: Shift + ESC to close Active Tool Window
Next Time
    Use either “All” or “Just Unit”
    Review Retro goals
        Collect from the past
    Think about updating your tools: Git, IntelliJ, mob(maybe)

Retrospective: Ensemble #32 (Fri October 29, 2021)
--------------------------------------------------
Next Time
    Everyone turn on Presentation Assistant to show shortcuts
    Driver doesn't run tests until prediction is made:
        Only when writing test for new behavior that we expect to fail:
            predict precisely why it will fail.
    Ensemble doesn't let drivers run away
Thoughts, Observations
    Word of the day: Snoop
    Nooooooo
        breadcrumbs
    Disorienting after missing a couple of weeks, took a bit to regain context
    We're guessing too much instead of just looking at the code +1
    Didn't make test fail before it passed — never saw it fail
    Liked staying more in the Domain, understanding it better/deeply, and flowed better because of that
    Not enough prediction
    Notice where tests are no longer readable in isolation and fix them
        e.g., CsvGameRepositoryTest
    Move test methods around as we notice them
    Less “pressure” to reorganize/evolve tests vs. evolving prod code
Learnings
    Filter to show only broken tests +1
    Presentation Assistant installation/config on Windows

Retrospective: Ensemble #31 (Fri October 22, 2021)
--------------------------------------------------
Thoughts, Observations
    Ubiquitous language morphing — making it reflected in the code
    Good Domain discussions
    Found a bug relating to Dealer when running the app!
    Stepping out of the “inner” TDD loop and going out to see does it work from the “outside”
    Hands-up reminder
    Dying of curiosity why it's currently broken!
    Refactoring focus makes me happy!
    Running the app!
    Look at details/cause of failing tests instead of assuming the reason due to the most recent code change
        Led us to an experiment that broke things worse
    Liked getting rid of getCurrentPlayer()
        Nice that we needed only the ID and allowed us to get rid of the evil getter
Learnings
    Refactoring to move code from a test into the Domain
    Shift-Enter immediately opens file on the right split
Next Time
    TRY not to jump to conclusions as to why the tests failed leading jumping to a solution that's wrong

Retrospective: Ensemble #30 (Fri October 15, 2021)
--------------------------------------------------
Thoughts/Observations
    Absolutely fascinating!
        All the tests passed, even though the code seems weird that it should work
            Seems like there's less code than there should be??
        We now have code that is not necessarily understandable — tunnel vision
    Tests pass, but code is a bit misleading, time to refactor
    Someone is always noticing issues, e.g., unintended change
        Navigator doesn't always notice things, but others noticed
    Mixed feelings about the mob correcting (jumping in) vs. letting the Navigator complete their idea
    Missed working with folks
        Working together really well
    TDD can end up with working code that may not be easy to understand
    Tests are cheap!
        Run them more
    Discussions around unexpected test failures
    Testing from a distance vs. testing closer to the Domain
        Easier to determine what's going on
    Starting with asserts might have been useful — getting confused with incorrect assertions
    Too many constructors in Game
        Not an immediate pain point
    Interesting experience holding back vs. saying something
    Understand for EVERY failing test, truly why did it fail
        Too easy to assume that it was due to the change made and was intentional, instead of an accidental change
    Test naming, if you're stuck, use Given, When, Then to clarify
    Heuristic: Predict if new test is expected to Fail, otherwise just run the dang tests (as experiment)
    Run unit tests all the time, no need to run just a single test
Next Time
    Let's try: instead of interrupting/pointing out things, let's use Zoom's “raise hand”, or just physically raise your finger (i.e., non-vocal)

Retrospective: Ensemble #29 (Fri October 8, 2021)
-------------------------------------------------
Thoughts & Observations
    We were flexible with the next step as things present themselves, e.g., let's go create the Multi-player stub deck now (instead of later or never)
    Nice to go into Huddle to confirm next step (e.g., tiny step)
    Tiny step of changing internal code before changing public interface
        +1
    Being explicit about values chosen for constants to ensure tests fail for the right reason
    Adding toString() to make the test failures easier to read
    Adding equals() and hashCode() for the new value object to make it pass
    Added a fail() that was added at the end of a turn to leave a breadcrumb
        Especially useful if there's an actual break (lunch, end of day, etc.)
    Explore your intuition: even if it seems wrong, there's likely something there that's important
    If you expect a test to fail and it doesn't, dig deep
    Writing a test that's expected to pass, but not sure of the correct string (Characterization)
    Noticed the redundant/useless words in names because of the context (e.g., MultiPlayerStubDeckFactory)
    Fun day!
        Bad “dad” jokes

Retrospective: Ensemble #28 (Fri September 24, 2021)
----------------------------------------------------
Learnings
    Close all other tabs in pane
        If you like it, assign a keymap shortcut
    Focusing on smaller steps, towards the unknown parts
Thoughts, Observations
    Noting down tasks, where we've left off, etc., so we can easily pick up for next time — Breadcrumbs
    Like driving feature from outside-in, especially using Strings for event instead of Enums
        Strings makes it easier to move forward and gets us to green quickly
    Very Small Steps moving from test to test
    Everyone's noticing and fixing little "annoyances"
    Drivers are anticipating what the navigator needs
    Concerned about not really driving from front-end/outside
        Maybe driving by tests from Controller (or Service)
    Not enough considering refactoring when we're at “green”
    Learning to better deal with uncertainty
        Trusting that we'll (or I'll) figure it out
        Better going with the flow of the group
    Creating separate test classes for the “Event” aspects of Game
    “Feel” of the smaller ensemble - more focused, a little less opportunity for “stepping back”
    Felt "smooth"
    Switch focus to Player for generating the “reason done” once we had clarity around requirements for it
        +1
    Was quick to get started in the group, instead of overthinking
    Spent a fair bit of time up-front orienting towards what we'd work on

Retrospective: Ensemble #27 (Fri September 17, 2021)
----------------------------------------------------
Observations, Thoughts
    Used iterator for the first time!
    Parallel refactoring to stay in the green as long as possible
    Tried several things: moving conditions around, renaming, until we got to a good place
        +1
    Spent time on coming up with good names for methods
        +1
        Tried out different names, experimenting, looking for “better” (not perfect)
    Took the time to refactor
    Code is now more “scannable” (understandable at a glance)
        Just trying it to see, and then maybe undo it if not happy with it
    Ensemble stretched the limits
        Lada went “over time” to complete the “thought”
        Group “barged in” to work on improving name
            Make it more explicit that we were “huddling” on the name
            Ask permission
    Liked the “Spike” of copying the method to try something different and compare/contrast
    Driver sketching in comments what navigator was saying to not lose train of thought
        +1
    Instead of moving forward while “in the red”, we pushed toward getting back to green — which turned out to be easier than expected
Learnings
    Learned about Iterator
    “Early Return” vs. “Guard Clause”
        Guard Clause: aka “Fail and Bail”
    IntelliJ IDEA invert condition: select the expression then context action
    If you're stuck, go sleep
        Or take a walk
Next Time
    Upgrade mob.sh

Retrospective: Ensemble #26 (Sat September 11, 2021)
----------------------------------------------------
Observations, Thoughts
    Very interesting refactoring ++
    Interesting moment of a huge refactoring, driving it from TDD
        Huge change in behavior
        Chip away at broken tests one at a time
        Back-and-forth helped improve understanding of the problem
    “Argue over code that exists” vs. idea for code
    Noticed Ubiquitous Language coming up, and can change over time
        Single player vs. multi-player
        Game over vs. players done
    Extract Boolean Expression to Query Method
    Watching the video of Blackjack game being played helped understand the rules
    Confidence in tests as code grows
        “Downside of having good tests”
    “Zoom out” and step back and think about the Domain instead of focusing solely on the code
    Continuity of mob team is really valuable
    Changing Behavior means TESTS WILL FAIL (and that's OK)
        Be more clear about why a test failed
    Consulting with the mob (“Huddle”) really helps
Learnings
    RED tests are not BAD, only unexplained or bad tests
Next Time
    Get rid of extra windows (e.g., run/test window) unless needed
        Navigator needs to drive closing the window if any failing tests
    Watch the Blackjack multi-hand video to see different scenarios

Retrospective: Ensemble #25 (Fri September 3, 2021)
---------------------------------------------------
Observations/Thoughts
    Seeing small steps: what are we testing and how to observe?
    Current design supports adding the new features
    Felt like we were all on the same page, flowing well
    Wondered if deleting a line was a good idea?
        Experiments are good!
    Noticed code smell of growing number of Game constructors for tests
    Noticed naming drift of existing code, e.g., StubDeck, elsewhere
    Using the GameMonitor in a test (in a Mockist manner) to see end of game behavior
    More noticing of process or naming from the crowd
    Getting better at predicting before running tests
Learnings
    How to change Zoom background
    Encapsulate Field refactoring
Next Time
    Play a few games of Blackjack if you've never played
        You will be tested


Retrospective: Mob #24 (Fri August 27, 2021)
--------------------------------------------
Learnings
    throw UnsupportedOperationException as a breadcrumb
    DB entity ID vs. Domain ID
    [Select None] button on the Generate Constructor dialog creates a no-arg constructor
Observations
    Might not be calling “huddle” often enough and perhaps going off track
    Brain dead
    I'm tired
        +1
    Thinking out loud might be confusing driver, might want to call “huddle”; when stuck
    Naming tests is hard
        Hard to figure out exactly and precisely what we want to do
            How do we know it did it (Observation)
        Quality of test name affects thinking - more important that quality of code method names
    Driver anticipated next need
    When Ted was navigating got through a lot of stuff
    Doing Ensembles is what convinced me that Ensembles is a good way to develop
    Eliminate randomness from tests to prevent future flakiness
    Tidy up tests to refine setup
Next Time
    Call for huddle if you (anyone) is not sure what we're doing
    “Thinking out loud”
    Format tests to make Given/When/Then sections clear
    If you're in the crowd (not navigating nor driving), and you see us going off-process (not doing TDD, ambiguous test names, etc.), you are encouraged to speak up.


Retrospective: Mob #23 (Fri August 20, 2021)
--------------------------------------------
Observations
    Fewer huddles than normal
    Deal to multiple players worked quickly
    Was very fun
    More cohesive discussions on the fly
    Seeing and discussing different approaches
    Thinking about assert-first
    Keeping good encapsulation in mind (it's not just private fields)
    Keeping in the green, despite that it's non-trivial work (to add multiple players)
        Feature flag?
    That moment when people saw “playerStateChanged”
Learnings
    Gutter Green rollback section
    Adding @Deprecated upon method creation ROCKS
        Indicate we don't like this method, but it's needed for now
        Named it as a getter to not even pretend it's good
    collection.for postfix autocompletion for a "for" loop
    Extracting in AssertJ
Next Time
Links
    Feature Flags
        LaunchDarkly (commercial)
        Togglz (Open Source)
        Evan's presentation: https://docs.google.com/presentation/d/17RHe9lfqF2Gh6xi5ffpIn6qAaQ1iMARHLVxYI6jTa5U/edit#slide=id.p
        Split.io (commercial)


Retrospective: Mob #22 (Fri August 13, 2021)
--------------------------------------------
Observations/Thoughts
    Pause and precise predictions: not just pass/fail, but exactly why it will fail
    Thinking about edge cases
    Constants can be useful for getting first test to pass
    Feeling more comfortable being part of the "crowd"
    Look at the Project structure for files instead of trying to figure it out from memory
    Don't try and perfect the design before coding
    Keep looking from the outside-in: how does information come into the system
    The ideal path is a straight line, but it's never straight in reality: what's the next smallest step you can take in that direction
        Sometimes you don't know enough to do a Prepare Refactoring
Learnings
    "You are allowed to break tests when introducing new/changed behavior" (in fact that's the only way to do it)
    Try not to think too far ahead and not rush into new features
    Slow down and think a little bit
Appreciations
    Liked standardizing on Test on Left-Pane and Code on Right-Pane
Next Time
    Use CamelCase names when searching for classes, e.g., "G S T" for GameServiceTest, (also "GaSeT")
        Cmd + L (Ctrl + G) go to Line number
    Incoming driver ensures that the last driver completes ‘mob next'
    Precise Predictions before running tests


Retrospective: Mob #21 (Fri August 6, 2021)
-------------------------------------------
Observations/Thoughts
    Unclear what the new feature was, could have used a list of tasks to do
    Didn't note in the Mission what we had decided to do
    We're smarter together
    Experiment: delete and see if tests still pass
    Seeing the fuzzy big picture turn into small steps
    Good catch to "prepare" refactor first to List of Player before needing to change behavior
Next Time
    Once tests run and PASS, close the test-run tool window to declutter the screen


Retrospective: Mob #20 (Fri July 30, 2021)
------------------------------------------

Next Time
    Run tests more often
        +100
    Driver can prompt "run test?"
Learnings
    For "Move Method", helps to parameterize method
    Inline Method is so useful! (and inline parameter, too)
    Thinking about responsibilities
        And point of view of objects (e.g., Player)
Observations
    This week felt easier: responsibilities between classes getting clearer
    Noticing a tendency to "simulate" the real world vs. good object domain model
    Liked high-level instructions and (as driver) asking for more details as needed
        +1
    Seemed focused on doing stuff
    Completed a lot of tasks
    Did some meaningful refactorings
    Didn't have to touch any tests!
    Rushed into next thing instead of doing some tidying up refactoring
        Take more time to think (re-think) names as they're moved or their responsibilities changed
    Sometimes go too quickly past the refactoring dialogs (e.g., replace all occurrences, or field vs. param)
    Running experiments - because tests are so cheap to run
        Make a change and run tests
Appreciations
    Good discussion/question around passing "card" or "deck" to player for "hit()"

Retrospective: Mob #19 (Fri July 23, 2021)
------------------------------------------

Learnings
    Felt strongly about one approach, but let the team go with a different approach
        Not natural for most people
    Thinking about behavior
    Alt+F12 (Option-F12) for Terminal
    Alas no way to delegate into an existing class
Thoughts, Observations
    Overthinking things: try and fail (or succeed) instead
        Stop reasoning/analyzing
    Switched from TDDing the playerTest to moving behavior
        Perhaps got sidetracked by moving isDone() to Player
    Making lots of decisions as a team, don't see how this could parallelized (separate people working on this)
    Might have been "butting in" too much, rather than being asked
    Interesting refactoring that led to exposing Feature Envy
    Struggled more than usual
    Commit to a direction, even if it turns out not to be workable, so everyone can learn
        +1
    It looked so simple to just move a field! (It's not)
    When we changed code to move player is done to Player (with isDone), felt too big of a step and doing two things at once
    Stop thinking, start coding
Appreciations
    Appreciated tidying up the playerDone field no longer needed
    Appreciated the huddles and help
    Course-correction on TDD
Next Time
    Browse the code a bit before the mob to reload the context


Retrospective: Mob #18 (Fri July 16, 2021)
------------------------------------------

Learnings, Thoughts, Observations
    Player class is better than anything I write — good names for methods
    Switching to the "command & query" mindset really is useful, not just a naming thing
    Commit-before-spike (experiment)
    Nice to see introduce new constructor refactoring
    Useful huddle to clarify things
    Reinforced not changing production code without failing test
    More interesting with the "higher-level" mission of moving to multiple Players
        Feels like we're learning a lot more
    Seeing everyone learning
    Can be hard to switch from "refactoring mode" to "writing new code" via writing tests
    As a mob we bring out "the best" in each other
    Like split screen fluency
        Appreciated!
    Deleting code!
    Renaming as a first step towards larger moves
    More thoughtful about goals (why?)
Appreciations
    Ted's video was really helpful
    Appreciate paying attention to code style (spacing, etc.)
    Ted's facilitation
Questions
    Should we shift to more high-level (abstract) instructions from the Navigator
        High-level is harder to think about
        Gives the driver more agency and might make it easier for them to take over when they become Navigator
        Might benefit the entire mob
Next Time
    Navigate at High-level first, only if needed navigate with lower level instructions
    Unfold code: remind before next mob
    Running test: clarify All, Integration, or Unit
    Use "Right" and "Left" when the window is split
    Editor Tabs on when split screen

Retrospective: Mob #17 (Fri July 9, 2021)
-----------------------------------------

Learnings, Thoughts
    Refactoring replacing implementation with a duplicate by comparing old vs. new in a test
        (Characterization-test like)
        Very useful when code can be hard to characterize ("legacy code")
    Overall group participation high
        good cohesion
    Inline just one usage to prepare for move
    Feeling like delivering code is important — self-imposed — slow down, check assumptions
    Like shortcuts being pushed on me
    AssertJ isEqualByComparingFieldByField was uses
        Also see usingRecursiveComparison
    Convert for loop to stream using IntelliJ IDEA's magic
For Next Time
    More like today


Retrospective: Mob #16 (Fri July 2, 2021)
-----------------------------------------

Thoughts, Learnings, etc.
    Ted's double-extract-method refactoring golf technique
    See the different approaches to refactoring during huddle
    Reminders about smaller steps and testing
    Manoj called huddle when needed
    Have a more explicit higher level goal
    Interesting contrast to a non-test situation
    Great discussion about encapsulation issue of cards and hand with respect to Player
    Don't forget to clean up the "trail" of changes left after chains of refactorings (e.g., method names)
    Pre-mob huddle and ad-hoc huddles to help clarify goals
    Feels like double-hop refactoring might be too much (other easier ways)
Next Time
    Navigator start with higher-level instructions rather than starting with details
        Trying to find balance between providing shortcuts and higher-level instructions
    Learn shortcuts
        Discuss for next time: push onto driver or let driver ask or let Navigator/Driver negotiate


Retrospective: Mob #15 (Fri June 25, 2021)
------------------------------------------
Learned
    Refresher for automated refactoring tools, understanding of purpose of moving — move to the right place, introduce params
    Took a complex task and broke it down into small actions
    Introduce parameter before moving method over to new class
    Extract Delegate
    Starting at the Domain very different approach than starting from the UI
    Nice to have review of Command & Query core definition
    Try the unfamiliar and maybe it's useful and will become familiar
    Cheat sheet!
        Practice what's there
        Be aware of what you're doing "manually", and try and remember to use the shortcut
        Maybe make your own?
Liked
    Picked a good task to work on
    Compound Refactorings
    Prepare refactor for new feature as a preliminary step
Next Time
    UNfold Code

Retrospective: Mob #14 (Fri June 18, 2021)
------------------------------------------
	Observations/Thoughts
		Felt lost the entire time, trouble finding our path
		Liked when Evan called for a huddle
		Less guessing and hoping
		Guessing really bugged me
		Liked when Bini reminded us to Predict before test running
		Being lost is uncomfortable, getting better at being lost in public
		Learned how to test-drive the new CSV repository and then just plugged it in and everything worked
		When tests failed after injecting, felt we weren't on the same page as to why they were failing — get together and understand why.
		Uncomfortable when doing some things that were not test-driven (when injecting and passing down thru call stack the new CSV repository)
		Hadn't run the Game in a long time! And it JUST WORKED.
		Got caught up in trying too hard to clarify test code

		Error stack trace: look at it
		Don't guess, look.
		Don't assume, look.
		Don't serialize through the screen — in the mob, you can be independent for a bit and come back to the mob with answers (diverge/converge)
		Forgot to run tests at the beginning
		Running not quite the right test as asked
		Time flew by!
		Feature is complete!
	Next Time
		Encourage people to ask for a huddle when lost +++
		Use more shortcuts!
		Use the time of handoff to evaluate whether what we're doing is worth it (e.g., clarifying code)
		Do independent "research" when in the crowd/mob.
		Turn off code folding


Retrospective: Mob #13 (Fri June 11, 2021)
------------------------------------------
	Learning/Takeaway
		Characterization test, to test the hypothesis that multiple games were on a single line, turned out not to be the case, disproving the hypothesis
			Characterization test vs. switching to debugger, staying in the work flow (+1)
		Consequences of moving test setup code to a "setup" method vs. a named method call in the test method
			Tradeoffs
		ZOMBIES in action, picking the right tests to move from zero, to one, and then to many
		Failed test to green by just hard-coding the correct answer in the code
		JUnit 5 @TempDir
	Observations
		Shorter huddles/hand-offs — doing the work, less "where are we" and coordination
			More "in sync", flow
		Be aware of specifying the Class name and the file number when multiple panes are open
		More focus on small steps, e.g., hard-coding
		Less "runaway driver" problem
			Learning from past experiences
		Navigator asking for help and mob swarmed for the answer
		More of the mob involved with "navigating", worked more closely together
		Stayed in the green (and noticed when in the red too long)
	Do or Not Do Next Time?
		More discussion? Asking "why are we doing this?" or "is there a better way to do that?"
		Need to be reminded of shortcuts for refactoring

Retrospective: Mob #12 (Sun June 6, 2021)
-----------------------------------------
	Observations
		Appreciated that Lada never hesitated to delete (redundant) code
		Driver careful/aware not run away from the Navigator
		Liked Ted checking on huddle being clear on what's happening and on the same page
		Started writing integration test that could have been unit test first
		Helpful to define carefully the behavior that's being tested before writing the test
		Bini great at providing feedback as Driver to clarify what Navigator was requesting
		Being mindful of what we're testing: what to keep, what to get rid of
		Question: how do we know when to take a step back?
		Noticed occasionally ‘mob start', but liked people confirming that it was done
		Mob is flowing much better: handoffs, etc.
	Next Time
		Technical "spike tests" are OK
		Try: Ted push shortcuts on Driver?
		Make sure the test behavior being tested is crystal clear, naming the method following Given/When/Then can help
		Keep ZOMBIES in mind
		Ted: Make sure to announce Driver & Navigator
		Keep Driver/Navigator order

Retrospective: Mob #11 (Fri June 4, 2021)
-----------------------------------------
	Observations
		In the red a lot less often than previous sessions
		Could have been in the red a lot less for Enum->String
		Predicting more than in the past
		Liked the new order of Driver-Navigator, handoff/transition seemed easier to continue (+2)
		Discussion around options for converting Enum to String, Coupling came up as a factor
			Helped to understand tradeoffs of options
		Refactoring test code is also important (+2)
			Refactoring to separate method felt like moving towards logic in test
		More conscious of smaller steps
		Detour into ParameterizedTest, which was a big step, led to refactoring to a method instead
		Discussion of test driving the very obvious implementation, vs. not test-driving at all and just finish implementation
			Driving the code vs. leaving regression tests behind
	Next Time
		Keep
			Driver + Navigator order & terminology
		Drop
			Don't push shortcuts on Driver unless asked
		Add
			Driver: Feel free to ask for shortcut
		Awareness
			How long in the red
			Size of steps
			Code being written without tests
			Precision Predictions


Retrospective: Mob #10 (Fri May 28, 2021)
-----------------------------------------
	Observations
		Code driving instead of test driving new code
		Typist thinking out loud
		Typist didn't do what the Navigator asked, and the Navigator didn't correct
			Typists not always asking clarifying questions
		Code formatting
			Lines are too long when window is split into two panes
				Avoid horizontally
		Tendency to run individual tests rather than all Unit Test
		Setup for stub decks is pretty verbose
		Good call for Mike to call a Huddle (when doing two things at once: format of GameOutcome and the result itself)
		Navigator burden held too heavily, could ask for guidance more often
		Take smaller steps
		Disabled test hung around for too long
		Avoid duplication of tests
		Transitions were a bit rough
	Suggestions
		Group mode was unclear: make more clear "Navigator is driving/thinking" vs. "Group huddling and discussing"
		Clarify Typist role: carries out Navigator's instructions/requests
			Typist can ask questions (say "I noticed this test is empty, should I delete?")
		Run All Unit Tests
			When to run All-All tests (incl. integration)
		Navigator: when handing off, explicitly state intent to next navigator: where we are and where we're going
			Call for Huddle if needed
	Like/Dislike
		Liked when team went into "huddle" mode to discuss and clarify intent
		Like: Ask Mob for help
		fail() breadcrumb
		Hard-coding to get test to pass
		Empty test was deleted

Retrospective: Mob #9 (Sat May 22, 2021)
----------------------------------------
(After 1 round)
* Need to work more on agreeing what the intent
* Fuzzy about where to go next
    * Discuss about where we're going
* Ask for a time-out to plan
* Red for 3 rotations, try to get to green faster
* Will try practicing with smaller steps

(After end)
* Best one overall
* Copying deck might have been too big of a step
* High tolerance for annoyances
* Delaying refactoring (including renames)
* Desire to get functionality implemented vs. tidying
* Make sure the error cause is clear before trying to fix
* Good use of shortcuts and asking about shortcuts

Next Time:
+ Mind map for retro next time
+ Game-plan huddle before starting (max 5m)
+ Call for huddle at any time (when lost, confused)
+ Hands/Eyes/Brain/Nose
    -> https://github.com/willemlarsen/mobprogrammingrpg
+ 90m-1h45m - hard stop at 1h45

Retrospective: Mob #8 (Fri May 21, 2021)
----------------------------------------

* More clarity of direction
* Liked retro in the middle (+1)
* Micro-test, focused on smaller classes
* Taking smaller steps
    * Create more, smaller classes
* Hard to remember in the "heat of the moment"
* Driving everything from the test
* Listen to that voice that says "is this becoming an integration test?"
* Notes in chat (+1)
* Don't be afraid to undo/throw away work <-- this is hard
* Shortcut of the day? Continue, maybe 2
* Try out T&C||R next time?
* Keep code & tests Tidy
* Test isolation: be able to understand without looking elsewhere
