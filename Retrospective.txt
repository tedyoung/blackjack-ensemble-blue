Retrospective: Ensemble #26 (Sat September 11, 2021)
----------------------------------------------------
Observations, Thoughts
    Very interesting refactoring ++
    Interesting moment of a huge refactoring, driving it from TDD
        Huge change in behavior
        Chip away at broken tests one at a time
        Back-and-forth helped improve understanding of the problem
    “Argue over code that exists” vs. idea for code
    Noticed Ubiquitous Language coming up, and can change over time
        Single player vs. multi-player
        Game over vs. players done
    Extract Boolean Expression to Query Method
    Watching the video of Blackjack game being played helped understand the rules
    Confidence in tests as code grows
        “Downside of having good tests”
    “Zoom out” and step back and think about the Domain instead of focusing solely on the code
    Continuity of mob team is really valuable
    Changing Behavior means TESTS WILL FAIL (and that’s OK)
        Be more clear about why a test failed
    Consulting with the mob (“Huddle”) really helps
Learnings
    RED tests are not BAD, only unexplained or bad tests
Next Time
    Get rid of extra windows (e.g., run/test window) unless needed
        Navigator needs to drive closing the window if any failing tests
    Watch the Blackjack multi-hand video to see different scenarios

Retrospective: Ensemble #25 (Fri September 3, 2021)
---------------------------------------------------
Observations/Thoughts
    Seeing small steps: what are we testing and how to observe?
    Current design supports adding the new features
    Felt like we were all on the same page, flowing well
    Wondered if deleting a line was a good idea?
        Experiments are good!
    Noticed code smell of growing number of Game constructors for tests
    Noticed naming drift of existing code, e.g., StubDeck, elsewhere
    Using the GameMonitor in a test (in a Mockist manner) to see end of game behavior
    More noticing of process or naming from the crowd
    Getting better at predicting before running tests
Learnings
    How to change Zoom background
    Encapsulate Field refactoring
Next Time
    Play a few games of Blackjack if you’ve never played
        You will be tested


Retrospective: Mob #24 (Fri August 27, 2021)
--------------------------------------------
Learnings
    throw UnsupportedOperationException as a breadcrumb
    DB entity ID vs. Domain ID
    [Select None] button on the Generate Constructor dialog creates a no-arg constructor
Observations
    Might not be calling “huddle” often enough and perhaps going off track
    Brain dead
    I’m tired
        +1
    Thinking out loud might be confusing driver, might want to call “huddle”; when stuck
    Naming tests is hard
        Hard to figure out exactly and precisely what we want to do
            How do we know it did it (Observation)
        Quality of test name affects thinking - more important that quality of code method names
    Driver anticipated next need
    When Ted was navigating got through a lot of stuff
    Doing Ensembles is what convinced me that Ensembles is a good way to develop
    Eliminate randomness from tests to prevent future flakiness
    Tidy up tests to refine setup
Next Time
    Call for huddle if you (anyone) is not sure what we’re doing
    “Thinking out loud”
    Format tests to make Given/When/Then sections clear
    If you’re in the crowd (not navigating nor driving), and you see us going off-process (not doing TDD, ambiguous test names, etc.), you are encouraged to speak up.


Retrospective: Mob #23 (Fri August 20, 2021)
--------------------------------------------
Observations
    Fewer huddles than normal
    Deal to multiple players worked quickly
    Was very fun
    More cohesive discussions on the fly
    Seeing and discussing different approaches
    Thinking about assert-first
    Keeping good encapsulation in mind (it’s not just private fields)
    Keeping in the green, despite that it’s non-trivial work (to add multiple players)
        Feature flag?
    That moment when people saw “playerStateChanged”
Learnings
    Gutter Green rollback section
    Adding @Deprecated upon method creation ROCKS
        Indicate we don’t like this method, but it’s needed for now
        Named it as a getter to not even pretend it’s good
    collection.for postfix autocompletion for a "for" loop
    Extracting in AssertJ
Next Time
Links
    Feature Flags
        LaunchDarkly (commercial)
        Togglz (Open Source)
        Evan’s presentation: https://docs.google.com/presentation/d/17RHe9lfqF2Gh6xi5ffpIn6qAaQ1iMARHLVxYI6jTa5U/edit#slide=id.p
        Split.io (commercial)


Retrospective: Mob #22 (Fri August 13, 2021)
--------------------------------------------
Observations/Thoughts
    Pause and precise predictions: not just pass/fail, but exactly why it will fail
    Thinking about edge cases
    Constants can be useful for getting first test to pass
    Feeling more comfortable being part of the "crowd"
    Look at the Project structure for files instead of trying to figure it out from memory
    Don't try and perfect the design before coding
    Keep looking from the outside-in: how does information come into the system
    The ideal path is a straight line, but it's never straight in reality: what's the next smallest step you can take in that direction
        Sometimes you don't know enough to do a Prepare Refactoring
Learnings
    "You are allowed to break tests when introducing new/changed behavior" (in fact that's the only way to do it)
    Try not to think too far ahead and not rush into new features
    Slow down and think a little bit
Appreciations
    Liked standardizing on Test on Left-Pane and Code on Right-Pane
Next Time
    Use CamelCase names when searching for classes, e.g., "G S T" for GameServiceTest, (also "GaSeT")
        Cmd + L (Ctrl + G) go to Line number
    Incoming driver ensures that the last driver completes ‘mob next'
    Precise Predictions before running tests


Retrospective: Mob #21 (Fri August 6, 2021)
-------------------------------------------
Observations/Thoughts
    Unclear what the new feature was, could have used a list of tasks to do
    Didn't note in the Mission what we had decided to do
    We're smarter together
    Experiment: delete and see if tests still pass
    Seeing the fuzzy big picture turn into small steps
    Good catch to "prepare" refactor first to List of Player before needing to change behavior
Next Time
    Once tests run and PASS, close the test-run tool window to declutter the screen


Retrospective: Mob #20 (Fri July 30, 2021)
------------------------------------------

Next Time
    Run tests more often
        +100
    Driver can prompt "run test?"
Learnings
    For "Move Method", helps to parameterize method
    Inline Method is so useful! (and inline parameter, too)
    Thinking about responsibilities
        And point of view of objects (e.g., Player)
Observations
    This week felt easier: responsibilities between classes getting clearer
    Noticing a tendency to "simulate" the real world vs. good object domain model
    Liked high-level instructions and (as driver) asking for more details as needed
        +1
    Seemed focused on doing stuff
    Completed a lot of tasks
    Did some meaningful refactorings
    Didn't have to touch any tests!
    Rushed into next thing instead of doing some tidying up refactoring
        Take more time to think (re-think) names as they're moved or their responsibilities changed
    Sometimes go too quickly past the refactoring dialogs (e.g., replace all occurrences, or field vs. param)
    Running experiments - because tests are so cheap to run
        Make a change and run tests
Appreciations
    Good discussion/question around passing "card" or "deck" to player for "hit()"

Retrospective: Mob #19 (Fri July 23, 2021)
------------------------------------------

Learnings
    Felt strongly about one approach, but let the team go with a different approach
        Not natural for most people
    Thinking about behavior
    Alt+F12 (Option-F12) for Terminal
    Alas no way to delegate into an existing class
Thoughts, Observations
    Overthinking things: try and fail (or succeed) instead
        Stop reasoning/analyzing
    Switched from TDDing the playerTest to moving behavior
        Perhaps got sidetracked by moving isDone() to Player
    Making lots of decisions as a team, don't see how this could parallelized (separate people working on this)
    Might have been "butting in" too much, rather than being asked
    Interesting refactoring that led to exposing Feature Envy
    Struggled more than usual
    Commit to a direction, even if it turns out not to be workable, so everyone can learn
        +1
    It looked so simple to just move a field! (It's not)
    When we changed code to move player is done to Player (with isDone), felt too big of a step and doing two things at once
    Stop thinking, start coding
Appreciations
    Appreciated tidying up the playerDone field no longer needed
    Appreciated the huddles and help
    Course-correction on TDD
Next Time
    Browse the code a bit before the mob to reload the context


Retrospective: Mob #18 (Fri July 16, 2021)
------------------------------------------

Learnings, Thoughts, Observations
    Player class is better than anything I write — good names for methods
    Switching to the "command & query" mindset really is useful, not just a naming thing
    Commit-before-spike (experiment)
    Nice to see introduce new constructor refactoring
    Useful huddle to clarify things
    Reinforced not changing production code without failing test
    More interesting with the "higher-level" mission of moving to multiple Players
        Feels like we're learning a lot more
    Seeing everyone learning
    Can be hard to switch from "refactoring mode" to "writing new code" via writing tests
    As a mob we bring out "the best" in each other
    Like split screen fluency
        Appreciated!
    Deleting code!
    Renaming as a first step towards larger moves
    More thoughtful about goals (why?)
Appreciations
    Ted's video was really helpful
    Appreciate paying attention to code style (spacing, etc.)
    Ted's facilitation
Questions
    Should we shift to more high-level (abstract) instructions from the Navigator
        High-level is harder to think about
        Gives the driver more agency and might make it easier for them to take over when they become Navigator
        Might benefit the entire mob
Next Time
    Navigate at High-level first, only if needed navigate with lower level instructions
    Unfold code: remind before next mob
    Running test: clarify All, Integration, or Unit
    Use "Right" and "Left" when the window is split
    Editor Tabs on when split screen

Retrospective: Mob #17 (Fri July 9, 2021)
-----------------------------------------

Learnings, Thoughts
    Refactoring replacing implementation with a duplicate by comparing old vs. new in a test
        (Characterization-test like)
        Very useful when code can be hard to characterize ("legacy code")
    Overall group participation high
        good cohesion
    Inline just one usage to prepare for move
    Feeling like delivering code is important — self-imposed — slow down, check assumptions
    Like shortcuts being pushed on me
    AssertJ isEqualByComparingFieldByField was uses
        Also see usingRecursiveComparison
    Convert for loop to stream using IntelliJ IDEA's magic
For Next Time
    More like today


Retrospective: Mob #16 (Fri July 2, 2021)
-----------------------------------------

Thoughts, Learnings, etc.
    Ted's double-extract-method refactoring golf technique
    See the different approaches to refactoring during huddle
    Reminders about smaller steps and testing
    Manoj called huddle when needed
    Have a more explicit higher level goal
    Interesting contrast to a non-test situation
    Great discussion about encapsulation issue of cards and hand with respect to Player
    Don't forget to clean up the "trail" of changes left after chains of refactorings (e.g., method names)
    Pre-mob huddle and ad-hoc huddles to help clarify goals
    Feels like double-hop refactoring might be too much (other easier ways)
Next Time
    Navigator start with higher-level instructions rather than starting with details
        Trying to find balance between providing shortcuts and higher-level instructions
    Learn shortcuts
        Discuss for next time: push onto driver or let driver ask or let Navigator/Driver negotiate


Retrospective: Mob #15 (Fri June 25, 2021)
------------------------------------------
Learned
    Refresher for automated refactoring tools, understanding of purpose of moving — move to the right place, introduce params
    Took a complex task and broke it down into small actions
    Introduce parameter before moving method over to new class
    Extract Delegate
    Starting at the Domain very different approach than starting from the UI
    Nice to have review of Command & Query core definition
    Try the unfamiliar and maybe it's useful and will become familiar
    Cheat sheet!
        Practice what's there
        Be aware of what you're doing "manually", and try and remember to use the shortcut
        Maybe make your own?
Liked
    Picked a good task to work on
    Compound Refactorings
    Prepare refactor for new feature as a preliminary step
Next Time
    UNfold Code

Retrospective: Mob #14 (Fri June 18, 2021)
------------------------------------------
	Observations/Thoughts
		Felt lost the entire time, trouble finding our path
		Liked when Evan called for a huddle
		Less guessing and hoping
		Guessing really bugged me
		Liked when Bini reminded us to Predict before test running
		Being lost is uncomfortable, getting better at being lost in public
		Learned how to test-drive the new CSV repository and then just plugged it in and everything worked
		When tests failed after injecting, felt we weren't on the same page as to why they were failing — get together and understand why.
		Uncomfortable when doing some things that were not test-driven (when injecting and passing down thru call stack the new CSV repository)
		Hadn't run the Game in a long time! And it JUST WORKED.
		Got caught up in trying too hard to clarify test code

		Error stack trace: look at it
		Don't guess, look.
		Don't assume, look.
		Don't serialize through the screen — in the mob, you can be independent for a bit and come back to the mob with answers (diverge/converge)
		Forgot to run tests at the beginning
		Running not quite the right test as asked
		Time flew by!
		Feature is complete!
	Next Time
		Encourage people to ask for a huddle when lost +++
		Use more shortcuts!
		Use the time of handoff to evaluate whether what we're doing is worth it (e.g., clarifying code)
		Do independent "research" when in the crowd/mob.
		Turn off code folding


Retrospective: Mob #13 (Fri June 11, 2021)
------------------------------------------
	Learning/Takeaway
		Characterization test, to test the hypothesis that multiple games were on a single line, turned out not to be the case, disproving the hypothesis
			Characterization test vs. switching to debugger, staying in the work flow (+1)
		Consequences of moving test setup code to a "setup" method vs. a named method call in the test method
			Tradeoffs
		ZOMBIES in action, picking the right tests to move from zero, to one, and then to many
		Failed test to green by just hard-coding the correct answer in the code
		JUnit 5 @TempDir
	Observations
		Shorter huddles/hand-offs — doing the work, less "where are we" and coordination
			More "in sync", flow
		Be aware of specifying the Class name and the file number when multiple panes are open
		More focus on small steps, e.g., hard-coding
		Less "runaway driver" problem
			Learning from past experiences
		Navigator asking for help and mob swarmed for the answer
		More of the mob involved with "navigating", worked more closely together
		Stayed in the green (and noticed when in the red too long)
	Do or Not Do Next Time?
		More discussion? Asking "why are we doing this?" or "is there a better way to do that?"
		Need to be reminded of shortcuts for refactoring

Retrospective: Mob #12 (Sun June 6, 2021)
-----------------------------------------
	Observations
		Appreciated that Lada never hesitated to delete (redundant) code
		Driver careful/aware not run away from the Navigator
		Liked Ted checking on huddle being clear on what's happening and on the same page
		Started writing integration test that could have been unit test first
		Helpful to define carefully the behavior that's being tested before writing the test
		Bini great at providing feedback as Driver to clarify what Navigator was requesting
		Being mindful of what we're testing: what to keep, what to get rid of
		Question: how do we know when to take a step back?
		Noticed occasionally ‘mob start', but liked people confirming that it was done
		Mob is flowing much better: handoffs, etc.
	Next Time
		Technical "spike tests" are OK
		Try: Ted push shortcuts on Driver?
		Make sure the test behavior being tested is crystal clear, naming the method following Given/When/Then can help
		Keep ZOMBIES in mind
		Ted: Make sure to announce Driver & Navigator
		Keep Driver/Navigator order

Retrospective: Mob #11 (Fri June 4, 2021)
-----------------------------------------
	Observations
		In the red a lot less often than previous sessions
		Could have been in the red a lot less for Enum->String
		Predicting more than in the past
		Liked the new order of Driver-Navigator, handoff/transition seemed easier to continue (+2)
		Discussion around options for converting Enum to String, Coupling came up as a factor
			Helped to understand tradeoffs of options
		Refactoring test code is also important (+2)
			Refactoring to separate method felt like moving towards logic in test
		More conscious of smaller steps
		Detour into ParameterizedTest, which was a big step, led to refactoring to a method instead
		Discussion of test driving the very obvious implementation, vs. not test-driving at all and just finish implementation
			Driving the code vs. leaving regression tests behind
	Next Time
		Keep
			Driver + Navigator order & terminology
		Drop
			Don't push shortcuts on Driver unless asked
		Add
			Driver: Feel free to ask for shortcut
		Awareness
			How long in the red
			Size of steps
			Code being written without tests
			Precision Predictions


Retrospective: Mob #10 (Fri May 28, 2021)
-----------------------------------------
	Observations
		Code driving instead of test driving new code
		Typist thinking out loud
		Typist didn't do what the Navigator asked, and the Navigator didn't correct
			Typists not always asking clarifying questions
		Code formatting
			Lines are too long when window is split into two panes
				Avoid horizontally
		Tendency to run individual tests rather than all Unit Test
		Setup for stub decks is pretty verbose
		Good call for Mike to call a Huddle (when doing two things at once: format of GameOutcome and the result itself)
		Navigator burden held too heavily, could ask for guidance more often
		Take smaller steps
		Disabled test hung around for too long
		Avoid duplication of tests
		Transitions were a bit rough
	Suggestions
		Group mode was unclear: make more clear "Navigator is driving/thinking" vs. "Group huddling and discussing"
		Clarify Typist role: carries out Navigator's instructions/requests
			Typist can ask questions (say "I noticed this test is empty, should I delete?")
		Run All Unit Tests
			When to run All-All tests (incl. integration)
		Navigator: when handing off, explicitly state intent to next navigator: where we are and where we're going
			Call for Huddle if needed
	Like/Dislike
		Liked when team went into "huddle" mode to discuss and clarify intent
		Like: Ask Mob for help
		fail() breadcrumb
		Hard-coding to get test to pass
		Empty test was deleted

Retrospective: Mob #9 (Sat May 22, 2021)
----------------------------------------
(After 1 round)
* Need to work more on agreeing what the intent
* Fuzzy about where to go next
    * Discuss about where we're going
* Ask for a time-out to plan
* Red for 3 rotations, try to get to green faster
* Will try practicing with smaller steps

(After end)
* Best one overall
* Copying deck might have been too big of a step
* High tolerance for annoyances
* Delaying refactoring (including renames)
* Desire to get functionality implemented vs. tidying
* Make sure the error cause is clear before trying to fix
* Good use of shortcuts and asking about shortcuts

Next Time:
+ Mind map for retro next time
+ Game-plan huddle before starting (max 5m)
+ Call for huddle at any time (when lost, confused)
+ Hands/Eyes/Brain/Nose
    -> https://github.com/willemlarsen/mobprogrammingrpg
+ 90m-1h45m - hard stop at 1h45

Retrospective: Mob #8 (Fri May 21, 2021)
----------------------------------------

* More clarity of direction
* Liked retro in the middle (+1)
* Micro-test, focused on smaller classes
* Taking smaller steps
    * Create more, smaller classes
* Hard to remember in the "heat of the moment"
* Driving everything from the test
* Listen to that voice that says "is this becoming an integration test?"
* Notes in chat (+1)
* Don't be afraid to undo/throw away work <-- this is hard
* Shortcut of the day? Continue, maybe 2
* Try out T&C||R next time?
* Keep code & tests Tidy
* Test isolation: be able to understand without looking elsewhere
