Retrospective: Mob #15 (Fri June 25, 2021)
------------------------------------------
Learned
    Refresher for automated refactoring tools, understanding of purpose of moving — move to the right place, introduce params
    Took a complex task and broke it down into small actions
    Introduce parameter before moving method over to new class
    Extract Delegate
    Starting at the Domain very different approach than starting from the UI
    Nice to have review of Command & Query core definition
    Try the unfamiliar and maybe it’s useful and will become familiar
    Cheat sheet!
        Practice what’s there
        Be aware of what you’re doing “manually”, and try and remember to use the shortcut
        Maybe make your own?
Liked
    Picked a good task to work on
    Compound Refactorings
    Prepare refactor for new feature as a preliminary step
Next Time
    UNfold Code

Retrospective: Mob #14 (Fri June 18, 2021)
------------------------------------------
	Observations/Thoughts
		Felt lost the entire time, trouble finding our path
		Liked when Evan called for a huddle
		Less guessing and hoping
		Guessing really bugged me
		Liked when Bini reminded us to Predict before test running
		Being lost is uncomfortable, getting better at being lost in public
		Learned how to test-drive the new CSV repository and then just plugged it in and everything worked
		When tests failed after injecting, felt we weren’t on the same page as to why they were failing — get together and understand why.
		Uncomfortable when doing some things that were not test-driven (when injecting and passing down thru call stack the new CSV repository)
		Hadn’t run the Game in a long time! And it JUST WORKED.
		Got caught up in trying too hard to clarify test code

		Error stack trace: look at it
		Don’t guess, look.
		Don’t assume, look.
		Don’t serialize through the screen — in the mob, you can be independent for a bit and come back to the mob with answers (diverge/converge)
		Forgot to run tests at the beginning
		Running not quite the right test as asked
		Time flew by!
		Feature is complete!
	Next Time
		Encourage people to ask for a huddle when lost +++
		Use more shortcuts!
		Use the time of handoff to evaluate whether what we’re doing is worth it (e.g., clarifying code)
		Do independent “research” when in the crowd/mob.
		Turn off code folding


Retrospective: Mob #13 (Fri June 11, 2021)
------------------------------------------
	Learning/Takeaway
		Characterization test, to test the hypothesis that multiple games were on a single line, turned out not to be the case, disproving the hypothesis
			Characterization test vs. switching to debugger, staying in the work flow (+1)
		Consequences of moving test setup code to a “setup” method vs. a named method call in the test method
			Tradeoffs
		ZOMBIES in action, picking the right tests to move from zero, to one, and then to many
		Failed test to green by just hard-coding the correct answer in the code
		JUnit 5 @TempDir
	Observations
		Shorter huddles/hand-offs — doing the work, less “where are we” and coordination
			More “in sync”, flow
		Be aware of specifying the Class name and the file number when multiple panes are open
		More focus on small steps, e.g., hard-coding
		Less “runaway driver” problem
			Learning from past experiences
		Navigator asking for help and mob swarmed for the answer
		More of the mob involved with “navigating”, worked more closely together
		Stayed in the green (and noticed when in the red too long)
	Do or Not Do Next Time?
		More discussion? Asking “why are we doing this?” or "is there a better way to do that?"
		Need to be reminded of shortcuts for refactoring

Retrospective: Mob #12 (Sun June 6, 2021)
-----------------------------------------
	Observations
		Appreciated that Lada never hesitated to delete (redundant) code
		Driver careful/aware not run away from the Navigator
		Liked Ted checking on huddle being clear on what’s happening and on the same page
		Started writing integration test that could have been unit test first
		Helpful to define carefully the behavior that’s being tested before writing the test
		Bini great at providing feedback as Driver to clarify what Navigator was requesting
		Being mindful of what we’re testing: what to keep, what to get rid of
		Question: how do we know when to take a step back?
		Noticed occasionally ‘mob start’, but liked people confirming that it was done
		Mob is flowing much better: handoffs, etc.
	Next Time
		Technical “spike tests” are OK
		Try: Ted push shortcuts on Driver?
		Make sure the test behavior being tested is crystal clear, naming the method following Given/When/Then can help
		Keep ZOMBIES in mind
		Ted: Make sure to announce Driver & Navigator
		Keep Driver/Navigator order

Retrospective: Mob #11 (Fri June 4, 2021)
-----------------------------------------
	Observations
		In the red a lot less often than previous sessions
		Could have been in the red a lot less for Enum->String
		Predicting more than in the past
		Liked the new order of Driver-Navigator, handoff/transition seemed easier to continue (+2)
		Discussion around options for converting Enum to String, Coupling came up as a factor
			Helped to understand tradeoffs of options
		Refactoring test code is also important (+2)
			Refactoring to separate method felt like moving towards logic in test
		More conscious of smaller steps
		Detour into ParameterizedTest, which was a big step, led to refactoring to a method instead
		Discussion of test driving the very obvious implementation, vs. not test-driving at all and just finish implementation
			Driving the code vs. leaving regression tests behind
	Next Time
		Keep
			Driver + Navigator order & terminology
		Drop
			Don’t push shortcuts on Driver unless asked
		Add
			Driver: Feel free to ask for shortcut
		Awareness
			How long in the red
			Size of steps
			Code being written without tests
			Precision Predictions


Retrospective: Mob #10 (Fri May 28, 2021)
-----------------------------------------
	Observations
		Code driving instead of test driving new code
		Typist thinking out loud
		Typist didn't do what the Navigator asked, and the Navigator didn't correct
			Typists not always asking clarifying questions
		Code formatting
			Lines are too long when window is split into two panes
				Avoid horizontally
		Tendency to run individual tests rather than all Unit Test
		Setup for stub decks is pretty verbose
		Good call for Mike to call a Huddle (when doing two things at once: format of GameOutcome and the result itself)
		Navigator burden held too heavily, could ask for guidance more often
		Take smaller steps
		Disabled test hung around for too long
		Avoid duplication of tests
		Transitions were a bit rough
	Suggestions
		Group mode was unclear: make more clear “Navigator is driving/thinking” vs. “Group huddling and discussing”
		Clarify Typist role: carries out Navigator’s instructions/requests
			Typist can ask questions (say “I noticed this test is empty, should I delete?”)
		Run All Unit Tests
			When to run All-All tests (incl. integration)
		Navigator: when handing off, explicitly state intent to next navigator: where we are and where we’re going
			Call for Huddle if needed
	Like/Dislike
		Liked when team went into “huddle” mode to discuss and clarify intent
		Like: Ask Mob for help
		fail() breadcrumb
		Hard-coding to get test to pass
		Empty test was deleted

Retrospective: Mob #9 (Sat May 22, 2021)
----------------------------------------
(After 1 round)
* Need to work more on agreeing what the intent
* Fuzzy about where to go next
    * Discuss about where we're going
* Ask for a time-out to plan
* Red for 3 rotations, try to get to green faster
* Will try practicing with smaller steps

(After end)
* Best one overall
* Copying deck might have been too big of a step
* High tolerance for annoyances
* Delaying refactoring (including renames)
* Desire to get functionality implemented vs. tidying
* Make sure the error cause is clear before trying to fix
* Good use of shortcuts and asking about shortcuts

Next Time:
+ Mind map for retro next time
+ Game-plan huddle before starting (max 5m)
+ Call for huddle at any time (when lost, confused)
+ Hands/Eyes/Brain/Nose
    -> https://github.com/willemlarsen/mobprogrammingrpg
+ 90m-1h45m - hard stop at 1h45

Retrospective: Mob #8 (Fri May 21, 2021)
----------------------------------------

* More clarity of direction
* Liked retro in the middle (+1)
* Micro-test, focused on smaller classes
* Taking smaller steps
    * Create more, smaller classes
* Hard to remember in the "heat of the moment"
* Driving everything from the test
* Listen to that voice that says "is this becoming an integration test?"
* Notes in chat (+1)
* Don't be afraid to undo/throw away work <-- this is hard
* Shortcut of the day? Continue, maybe 2
* Try out T&C||R next time?
* Keep code & tests Tidy
* Test isolation: be able to understand without looking elsewhere
