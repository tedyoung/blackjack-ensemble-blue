Retrospective: Ensemble #77 (Fri September 23, 2022)
----------------------------------------------------
[no retro held: ran out of time]


Retrospective: Ensemble #76 (Fri September 16, 2022)
----------------------------------------------------
[canceled]


Retrospective: Ensemble #75 (Fri September 9, 2022)
---------------------------------------------------
Thoughts, Observations
    More of a “debugging” session (no debugger), more code less talk
    Simplest code that could pass
    Solving only the next problem, trying not to solve more problems than we had
    Felt weird to be in red for so long
    Making a seam isn’t always easy to find/create
        How much to parameterize
    Making the hypothesis for what’s wrong more clear
    Learning Ensemble vs. Work Ensemble
        Senior/Lead should hold back and let the Team Learn
    It was deck.size() after all!
        Danger of overriding behavior from the parent
        Overriding constructors can be less dangerous
    Too many constructors: confusing between what are tests using, what were for backwards compatibility
    Sometimes Ted is wrong
    More learning moments
        We had more problems to solve
Learnings
    Lambdas are Single Abstract Methods (SAM)
        == Single method interface (not default)

Retrospective: Ensemble #74 (Fri September 2, 2022)
---------------------------------------------------
Thoughts, Observations
    OMG so amazing: Push Out Factory refactoring (via introduce parameter)
    Starting to understand in my bones what Prepare Refactoring means
    Factories are stateless
    Appreciated time spent on explanations to understand things
    Try not to discuss as much, figure it out when we get there with real code
    Serendipity of seeing something else that can trigger alternatives
    Can be hard to change direction
    When not driving, felt disconnected from the Ensemble
Next Time
    Drivers: try not to move/scroll around code without navigation (or move mouse and hover)
Questions?
    How to implement DeckFactory.createDeck() in Tests with StubDecks?


Retrospective: Ensemble #73 (Fri August 26, 2022)
-------------------------------------------------
Thoughts, Observations
    Didn’t write much code, did more Big Picture thinking to figure out how to handle fixing deck-runs-out-of-cards bug
    Prefer to “ration” the clean up
        Felt like more clean up than want to do in single session
    Satisfying to write the test
    Prefer to have written more code
        Dopamine hit of making progress
    3 weeks since last session is a long time
        Nice to see everyone!


Retrospective: Ensemble #72 (Fri August 5, 2022)
------------------------------------------------
Thoughts, Observations
    Some people like to understand why things work, others just accept that if it works, it works
        Depends on how much depth of expertise you’re trying to build
    Interesting how different the steps were than other times a similar code change was made
        Worth experimenting to see what happens instead of assuming
    Felt really rusty after so long since last ensemble
        Had setups wrong!
    Really fun
        Enjoyed it
Learnings
    Really understand lambdas, now that we saw the anonymous class implementation
        Consuming lambdas less often done than creating/passing in lambdas
        Use IntelliJ IDEA to expand the lambdas
    Refactor to Static Method
Phrase of the Day
    Syntactic Sugar


Retrospective: Ensemble #68 (Fri July 8, 2022)
----------------------------------------------
Thoughts, Observations
    Interesting to see the “other timeline” (Ensemble)
    Navigator intent-level instructions “Disable the test however you like”
        As the Driver, I appreciated it
        Comment out @Test vs. explicitly disabled/ignore, if no other tests are disabled, then @Disabled is preferred
    Would be nice to have a “linter” to mark methods in test classes that are non-private, but don’t have @Test annotation
    Was interesting to find that we already had an isGameOver() query method and didn’t need a new one (as originally thought)
    We don’t refactor-organize tests enough
        How do/should we organize tests: along what dimensions and according to Given, When, or Then?
        A result of evolutionary design: we organize the code well, but need this for test code
        Need consistency of where tests go, how to organize them
        (This is a bigger issue when you have multiple tests per prod code)
            Can lose some certainty that everything is covered?
        A danger during refactoring is that you’ve created new behavior that isn’t fully tested
Learnings
    In “find class” dialog, hold Shift+Enter to open the selected class in a pane (group) to the right of your current pane (group)
Next Time
    Use @Disabled instead of commenting out @Test


Retrospective: Ensemble #67 (Fri July 1, 2022)
----------------------------------------------
Thoughts, Observations
    If this were “real work”, we’d be more “just make the change”
        And run the tests
    As a Learning Ensemble, it’s good to try out different things to see what works
        It’s how we learn these skills
    We seem to use "Refactoring" to mean automated refactoring (vs. changing code manually that doesn’t change behavior)
    Because we have pretty good test coverage, refactoring is much more comfortable
    Seeing where the refactorings lead to is hard
Learnings
    From the Adapter, Commands must go through the Application Layer (“Service”). Queries can hit Domain or Application Layers.
    Color in Suit is an Attribute of the Suit (Domain concept) vs. how it’s displayed in the Adapter.
        Even though Color is not used Behaviorally.
            Could look like Feature Envy otherwise
        Does the Adapter have all the information it needs to interpret/transform the Domain to present to the world?
        Fairly subjective whether Color needs to be in Suit or can be purely up to the Adapter to interpret.
    Change Signature automated refactoring
    Redo (opposite of Undo)
    Refactor: Find Duplicates and Replace


Retrospective: Ensemble #66 (Fri June 24, 2022)
-----------------------------------------------
Thoughts, Observations
    IDEA needs code folding per project
    Hard to tell the difference between existing method and unparseable code in IDEA
    Fixing flaky test — if it’s easy enough, just do it right away
        Otherwise put an explicit fail() in it so you don’t lose track
    Love readability of custom domain assertions
        Hard to write and reason because it just looks like other assertThat(), but it returns HandAssert, GameAssert, etc., given the Hand, Game, etc.
        Internal implementation of AssertJ assertions is not easy to wrap your head around
    Seeing a step to reuse code
Learnings
Next Time
    Try to be more strict about runaway Driver
        Can always remind Driver to slow down/stop


Retrospective: Ensemble #65 (Fri June 17, 2022)
-----------------------------------------------
Thoughts, Observations
    Hard to multitask in an Ensemble
    Doing TDD can be slow, but the payback is big
        When all the little steps are done, it’s DONE.
    Remembering to take baby steps
        Don’t forget to make the test pass before moving on to the next step
        Especially when things are very new and/or complex
    Interesting to look at AssertJ generator
        Too much the first pass
        Put the generated code in a separate package (after making a mistake)
        “bootstrapped” ourselves to get things started
            Didn’t need to fully understand how all of the code works
        Experimented: judge based on “did we reach our goal” (of more readable test)
            A form of “argue in code”
            Need to finish the experiment before judging
        Since the assertions hide details, have to ensure those details are correct
    Can’t wait for next time!
Learnings
    assertThat…very readable, fluent


Retrospective: Ensemble #64 (Fri June 10, 2022)
-----------------------------------------------
canceled


Retrospective: Ensemble #63 (Fri June 3, 2022)
----------------------------------------------
Thoughts, Observations
    Seems like a lot of state with if statements, is there some pattern that could minimize or centralize it
    Wrote tests that failed, setting up the next navigator to fix them
    No idea why we wrote a test that turned out to be the opposite of what we wanted
    Three people are much more engaged and intense than more people
    Strict Navigator vs. jumping in, keeping things more loose
    Not very much “new” code this time around
    Made me feel better after a tough week
Learnings
    CTRL+F12 (CMD+F12) for showing methods in current file (where the caret is)
Next Time
    Custom AssertJ domain-specific `assertThat`s
Phrase of the Day
    “Grab first two cars of the train”


Retrospective: Ensemble #62 (Fri May 27, 2022)
----------------------------------------------
Thoughts, Observations
    Seems like a lot of state with if statements, is there some pattern that could minimize or centralize it
    Wrote tests that failed, setting up the next navigator to fix them
    No idea why we wrote a test that turned out to be the opposite of what we wanted
    Three people are much more engaged and intense than more people
    Strict Navigator vs. jumping in, keeping things more loose
    Not very much “new” code this time around
    Made me feel better after a tough week
Learnings
    CTRL+F12 (CMD+F12) for showing methods in current file (where the caret is)
    Manually initiating the "Process Duplicates" from the Refactor menu (#8!)
Next Time
    Custom AssertJ domain-specific assertThats
Phrase of the Day
    “Grab first two cars of the train”


Retrospective: Ensemble #62 (Fri May 27, 2022)
----------------------------------------------
Thoughts, Observations
    Liked 7-minute rotations
    Using a comment as a breadcrumb to get information out of our head so we can focus on something different
        Can also use chat to hold information
    Fix the immediate problem/issue in front of us, then can focus on larger issue later
        Not to be used to avoid the bigger issue
Learnings
    Move Instance: Escalate Visibility option
        No need to change the visibility of the method before moving it
    For each can replace the iterator
    Alt+⬆ and ⬇ (Ctrl+Shift+⬆/⬇ on Mac) to move next/previous method


Retrospective: Ensemble #61 (Fri May 20, 2022)
----------------------------------------------
Thoughts, Observations
    Been a long time since I’ve done OO work
        Thinking about boundaries and responsibilities of classes, etc.
    Extract Parameter for constructor was wizardry
    Refactoring with respect to a specific boundary: which boundary are we thinking about?
        Where should we start this next change?
    Let’s just delete something and see what breaks - lean on the compiler to find out what to adjust
        vs. refactoring
            and small, SAFE steps
    Slower: more thinking about the way things are structured
        Felt like a bit too much discussion
            Was unsure what to do next
    The “wall” that we hit was the one that came up during discussion
    In Controller classes, you want little to no logic (if statements)
        Also no Domain state (it’s a service)
    Weren’t sure about “how” the Deck Factory would be “programmable”, so we just started coding — so far we didn’t need it to be programmable
    GameService constructor: unclear who should be responsible for “new Deck()”
        What’s the right boundary for creating decks?
        Relates to the (future) problem of: what if we run out of cards?
        Inconsistency: controller? game startup (bootstrap)
Learnings
    “View Usages” (CTRL-B, CMD-B)
    Expand/shrink selection
Next Time
    Rename imSorryReallySorry test method


Retrospective: Ensemble #60 (Fri May 13, 2022)
----------------------------------------------
Thoughts, Observations
    Didn’t always Predict test failures
        Only if changing behavior
        Refactoring must pass (by definition)
    We were wrong that we could specify the deck in the Application startup: we don’t know the number of players at that point
        Doing the simplest possible thing can help shine a light on what needs to be done
        Start from the outside, to ensure it CAN actually work
    Hex Arch boundaries helps clarify where code goes: e.g., where do we parse “A,8,K,2”? In the adapter.
        Potentially in a Factory in the Application layer
Learnings
    Refactor to Static
Next Time
    Refactor to split domain into domain vs. application
        Service and elsewhere?
        Need to move mapping of Enum to String out of the domain


Retrospective: Ensemble #59 (Fri May 6, 2022)
---------------------------------------------
Thoughts, Observations
    Fun!
    IntelliJ “if” refactoring
    Thinking of how to implement it
    Used the Application test to help drive us and verify assumptions
    Small steps
        Be careful extracting method names with boolean expressions, can sometimes invert unintentionally
    Prefer switch over if
        Prefer Strategy over switch
    IntelliJ: trust, but verify (if reordering/refactorings)
    I thought we’d get this done this session! 😄
        Decisions can take time
        Unknowns about @Value
    Vocalizing high-level concepts and intentions really helps during hand off
Learnings
    Add braces context options
    Extract if subexpression
    De Morgan’s law of boolean algebra
    Default for @Value using colon
    Not having @Value config throws exception not null (if unspecified)
Word of the Day
    Pudding

Retrospective: Ensemble #58 (Fri April 29, 2022)
------------------------------------------------
Thoughts, Observations
    Nice to do Extract to Enum (via extract delegate)
        Too bad it doesn’t fix everything everywhere
    Refactoring to enum was not as smooth as we thought, but had rough edges
        Exposed violation of Hex Arch
        Strings in domain classes (like Enum) is a “hidden” (subtle) violation of direction of dependencies in HexArch
    Forgot other observations
    Noticed that a method in a test class wasn’t great—had to keep looking at its implementation
        Hard to evaluate verbally, writing them down to visually compare helped
Learnings
    Parameterized tests were cool
        Too bad @EnumSource wasn’t good enough
    EnumMap instead of HashMap
        For Enums as Keys!
Next Time
    Describing ways for Navigator to tell Driver where on the screen something is
Word of the Day
    Blarg

Retrospective: Ensemble #57 (Fri April 22, 2022)
------------------------------------------------
Thoughts, Observations
    Learn more about the Domain (ubiquitous language), especially as we get into edge cases
    Nice to have builders and tests with Domain language
    Multiple constructors can get really confusing, especially with the lambdas
        Lambda matched two completely different interfaces (GameRepository and GameMonitor)
    Navigator provided high level intent of “grab two asserts from previous test” rather than detailed instructions
        High level instructions are faster than lower-level (detailed)
    Noticed when we didn’t Predict test outcome
    FINALLY FINISHED DEALER BLACKJACK FEATURE!!!
        Only took a year or so
Learnings
    Push constant out: refactor by introducing parameter from a constant (e.g., “1” for number of players in the Game constructor)
    Replace Lambda with Method Reference (IJ hint)
    IJ waits to refresh files until you focus an editor or exit the terminal
Next Time
    Play the online multi-hand blackjack game
    Turn off Editor > Inlay Hints > Code Vision
        Bug filed?

Retrospective: Ensemble #56 (Fri April 15, 2022)
------------------------------------------------
Thoughts, Observations
    Fun!
        Even though we made honest mistakes
    Lots of honest (i.e., long) method names
    Took smaller steps
        Can’t always, but thinking about it more often
    Game constructor problem bites (again?)
    Is Game getting too big?
    PlayerStateChanged is complex
    Sometimes you have to use the debugger
        Test was set up incorrectly!
Learnings
    Show methods in current class: CMD+F12/CTRL+F12
    Amend Commit
    Cohere Method - cause to be coherent with the rest of the class
        is a Fix for Feature Envy


Retrospective: Ensemble #55 (Fri April 8, 2022)
-----------------------------------------------
Thoughts, Observations
    Sorry about runaway driving
    Happy with the refactoring away from Decorator
        +1
    Happy we tried the Decorator
    Why not both? [insert meme]
        Turned out we did use both: a Constant and Extract Method
    Paying more attention to names of refactorings
        IntelliJ IDEA’s names are sometimes different from Fowler’s Refactoring
        Using names to communicate better
    7-minute cycles were comfortable
    Deleting stuff is great!
        +++
    No longer scary to not know what we’re going to do next
    Perhaps we should have started at the outside first instead of diving into writing a GameTest
Learnings
    Getting hungry
    Sleepy not good
    If you don’t use return value from a method (IDEA suggestion), IDEA will ask if you want to Remove or Transform — transform keeps the “side-effect”
Next Time
    Remember to start from Outside for new functionality


Retrospective: Ensemble #54 (Fri April 1, 2022)
-----------------------------------------------
Thoughts, Observations
    Simulating the “real world” vs. the domain in the code
        e.g., no need to set all Cards to be Face Down in the Deck
    Feels more “domain-y” by embedded the Face Up/Down state in the Card itself
    Taking small steps to refactor
        Keeping tests passing/compiling (“staying in the Green”)
            vs. making a change and having 5 things break (don’t compile)
    Hard to think in Booleans!!
        Are you sure you want to use a boolean?
    Use boolean parameters with a readable name instead of true/false
    Liked refactoring away from Decorator
    Refactoring with respect to a boundary
        DealerHand = Refactor, Card = new behavior (flip method)
    Refactor to Enum via automated refactoring
        Being OK with making a mistake - trial & error
            Because we can! (And that’s why we’re here)
            Easier to throw away code if you’re taking tiny steps
    Nice hand-off between Navigators
    Reorder tests: yes, we care about the order of things!
Learnings
    Keyboard shortcuts!
    IntelliJ stuff
Next Time
    Code-folding for single line method: turn this off
    Navigator too low-level (click, type this character)
    Reminder: Driver ask for shortcut if they don’t know it

Retrospective: Ensemble #53 (Fri March 25, 2022)
------------------------------------------------
Thoughts, Observations
    Interesting to continue with the decorator way of working
    Some fun issues with expectations in tests
    Trying things out (when you’re not sure) is fun
    Interesting to jump in to an experiment in-progress
    Joy at seeing failures
    Folks called for “huddle” freely
    Test wasn’t correct, was eventually caught
    Just because all tests pass, even with TDD, doesn’t mean everything works as it should
Learnings
    Seeing how Decorator is awkward
        Led us back to that “face up” is a Domain issue
    (Domain) Learned that the Dealer flips their Hole card over when they start their turn
Next Time
    Non-decorator way to do it


Retrospective: Ensemble #52 (Fri March 18, 2022)
------------------------------------------------
Thoughts, Observations
    Not sure about implementing the (empty) decorator first not driven by the domain?
        Make existing code work (prepare refactoring)
            Should have deleted the override first
        Driving from outside-in might have been more clear?
            We explicitly wanted Decorator solution
    Instead of implementing one by one when test failed, delete methods and use Delegate Methods to implement
    Liked the “line 20 1/2” directive [for navigation]
    Like the huddle
    Not thrilled with FaceUpCard as a name?
        It’s in your face
    Happy with new folks!
    Enjoyed trying the Decorator pattern
Learnings
    Delegate methods automated refactoring


Retrospective: Ensemble #51 (Fri March 11, 2022)
------------------------------------------------
Thoughts, Observations
    Hard after being away for a week
        or two
        Being the driver helped get bearings
    Dislike/frustrated not knowing the long-term path
    Didn’t understand what the later problem actually was, until we hit it
    Liked that we “sketched” out the code ideas to make it concrete
        Discussing in code
    Didn’t like 7 minutes per turn as much, but could be because frustrated by not knowing where we were going
    Despite discussion about options the prior week, it turns out the one we selected didn’t really work once we coded
Learnings
    Know better what an Acceptance Test is
Next Time
    Try 7 minute (for small group) again
    If you’ve been away, be the Driver


Retrospective: Ensemble #50 (Fri March 4, 2022)
-----------------------------------------------
Thoughts, Observations
    Got bitten by “simulate” vs “model” the real world issue
    Like how test is serving as documentation
        Exploring how big a test should be — it was larger than we might normally do, but favored one test for documenting
    Exploring in an Ensemble is a great place to discuss issues, especially those that are outside the “norm”
        If it were in a P.R., it might be rejected, or have lots of back-and-forth
        Danger of Guidelines becoming rules without forum for discussion
    Longer rotation time for smaller group seemed good
    Nice to discuss pros/cons for (a plan for) solving the “Dealer Face Down Card” issue
        Coming up with at least 3 choices
        Thinking about the choices in the context of DOMAIN Modeling and where the boundaries are
        Evaluating based on Domain vs Adapter, and Value Objects
            Immediately rejected “let the Adapter do it”
Next Time
    Maybe try 7 minutes instead of 10 minutes for small groups


Retrospective: Ensemble #49 (Fri February 25, 2022)
---------------------------------------------------
Thoughts, Observations
    Often there’s a way to use automated refactorings to do a composite (larger) refactoring, instead of manual refactoring and leaning on the compiler
    Smaller Ensemble (with 3), much more intense, faster paced
        Maybe use a break
        Longer cycles?
            Until Green?
    Explored more in terms of refactoring and looking for duplication
        Partial duplication with the if(queue not empty) vs. while(queue not empty): seemed odd and revealed a bug
    Noticing some places where couldn’t follow Ted’s thought process
    Forgetting some of the “tools” to use
        Deliberate practice
Learnings
    Change Signature to swap parameters
    postfix “.for”
    Select multiple parameters for Introduce Parameter (creates array)
    Refactoring to convert array to var args
        Remember varargs at the end
Next Time
    For 3 ppl, try 10 min cycle



Retrospective: Ensemble #48 (Fri February 18, 2022)
---------------------------------------------------
Thoughts, Observations
    Enjoyed different approaches to refactoring +1 +1
        Different from what I had in mind
    Coming back after a break was surprisingly easy
    Didn’t stop to think about alternatives
    Can we control “propagation” of errors
        Can I figure out a way to do this and run tests after each step
    Almost a year of this!
    More able to mentally visualize Composite Refactorings
Learnings
    Using `private` to figure out which methods were still using the method (leverage/leaning on the compiler to show you where you need to fix things)
    Action Search (Cmd+Shift+A, Ctrl+Shift+A)
    Postfix `for` on collections to generate the for loop
    Ctrl+Y (not “eye”) delete current line (Cmd+Del)
Next Time
    Do an explicit commit before doing a non-trivial refactor


Retrospective: Ensemble #47 (Fri February 11, 2022)
---------------------------------------------------
Thoughts, Observations
    Prepare Refactoring to prepare for multiple player hands
    Copy-n-paste ignores formatter:off
    Test Data Builders are fun
    Getting a bit complicated with the deques and lists and bears
    The 2 literal was mistaken for number of players, when it was the number of cards for an initial deal
Learnings
    formatter:off/on
    Surround with Ctrl+Alt+T (Cmd+Opt+T)


Retrospective: Ensemble #46
---------------------------
[canceled]


Retrospective: Ensemble #45 (Fri January 28, 2022)
--------------------------------------------------
Thoughts, Observations
    Going last felt harder, having to follow what came before
    Struggled—knew what was wanted, hard to find the next smallest step to get there
        Knew the output, how to test-drive
    Different kind of work than the usual “domain-driven” work
        Also satisfying
    Seeing and getting hands-on in a different kind of builder
    Excited to do test builder
    Surprised that List knows how to toString() itself
    Subclassing and having the cards reference confused as to where it was defined/saved/used
    Prepare refactoring seems like premature refactoring
    Look at the code
    Form hypothesis of why test is failing
    A bit of getting lost what Navigator wants to see vs. what Driver is showing
    Delaying extracting Deck to a proper interface resulted in a bug with the StubDeck constructor (List<Card>)
Learnings
Next Time
    Assume Run Just Unit tests by default, unless otherwise specified
    Drivers pay attention to scrolling and controlling what’s in view

Retrospective: Ensemble #44 (Fri January 21, 2022)
--------------------------------------------------
Thoughts, Observations
    Working outside-in was more comfortable
    Got a better sense of when to add functionality vs. stepping back and refactoring
    Test closer to the class
    Take smaller steps
        Even by hard-coding a value!
            +1
    Noticing Primitive Obsession: PlayerId
        As well as “reason done” should be an enum
    Noting where we use Strings (Adapter) and not (Domain)
    PlayerId vs. Id, depending on context
    Finished Events on the UI!
        +1
    Easier to start from the view
    Very smooth
    Don’t fight indentation — just do it, and reformat after (Cmd+Opt+L / Ctrl+Alt+L)


Retrospective: Ensemble #43 (Fri January 14, 2022)
-------------------------------------------------
Thoughts, Observations
    Domain is concrete — closer to the physical world, makes it easier to understand
    So Excite: see outcome and cards for multiple players!!!
        +1
    What was that bug?!?
    Multiple turns without writing code
    Changing TEST before changing CODE
    Extra effort to make test fail before making a change to the code (player outcome)
Learnings
    jps (Java Process list)


Retrospective: Ensemble #42 (Fri January 7, 2022)
-------------------------------------------------
Thoughts, Observations
    Dynamic of 3 people felt very different
        Seemed easier to “pipe up"
    Got rid of getPlayers()! Finally!
    Discussion points were few and fast
        Maybe shorter because fewer people - faster sync
    Delayed for PlayerResult passing in Player in the constructor instead of individual pieces
        Nicer to pass in PlayerOutcome instead of propagating Dealer Hand - made testing easier
    Good discussion highlighting the “current player” methods weren’t well named and protocol not being enforced
Learnings
    ALT-DEL (Safe Delete) CMD-DEL
    CTRL-E (Recent Files)


[No Ensemble #41]

Retrospective: Ensemble #40 (Fri December 24, 2021) 🎄
------------------------------------------------------
Thoughts, Observations
    Nice Precise Predictions
    Incorrectly setup test was fun to figure out
        Bitten by too many overloaded Game constructors
        Narrow down hypotheses for cause of failure
    Could have finished the Thymeleaf template before refactoring to remove getPlayers()
Learnings
    Ctrl+Shift+I (Windows) or Opt+Space (Mac) - “Quick Definition” - preview of implementation
    Shift+Shift
        Use more precise search, e.g., Ctrl+N (Cmd+O) for finding a Class
Next Time
    Turn off Code Folding
    Try to run tests before joining Ensemble


Retrospective: Ensemble #39 (Fri December 17, 2021)
---------------------------------------------------
Thoughts, Observations
    Navigating via low-level instructions (shortcuts) instead of desired outcome/intent
        Start with intent
    Conversation around parameters, coupling, “client/consumer burden”
    Queries snapshot point-in-time information and return should be immutable
    Different levels of “paranoia” around testing
        Judgement Premise
Learnings
    Highlight Usages in File shortcut: something something F7
        Use with F3 or Cmd+G to find next usage
Next Time
    IDEA Font size >= 16


Retrospective: Ensemble #38 (Fri December 10, 2021)
---------------------------------------------------
Thoughts, Observations
    I’m still going to fast and not taking time to think. Runaway driver. Jumping to solution.
        +1 :(
    Away from mob, though seemed easier to jump in
    Sometimes hard to see smaller steps
    Determining actual source of problem before trying to solve it
    Figure out what needs to be tested vs. what’s already tested (GameOutcomeView vs. PlayerOutcomeView)
    Liked cleaning up names of things
Learnings
    Prefer code duplication across Adapters — risky to “share” code: changes to behavior in one would change the other, probably unintentionally
        Adapters should be isolated
        Blame obsession with DRY
    F6 Move Static Method can create new class (and move multiple methods at once)
    Ctrl-T “Refactor This” menu
    Turn on soft-wrapping in console
    Find Action: Ctrl+Shift+A
Next Time
    Careful: wait to “steal screen” until after driver does “mob next” (confirm it is done)
    Navigator should stay at high-level instructions, unless Driver asks for more help
    Review past Retrospectives
    Drivers: don't run tests until you hear a Precise Prediction

Retrospective: Ensemble #37 (Fri December 3, 2021)
--------------------------------------------------
Thoughts, Observations
    Try to understand the true cause of the error message
    What is TSTTCPW (The Simplest Thing That Could Possibly Work) to make the current test pass
        Minimum requirements of the test
    Enjoyed refactoring via tiny automated steps
        +1
        A new way of looking at the approach
    Moving constructor code into a static method for transformation of Domain to DTO/View
    Move Method refactoring: just type the existing class and IJ will autocomplete package
    Fun session
    Making the test more obvious: e.g., inline factory method to visualize the work
        Made a mistake later (somewhat) easier to find
    When confused: check assumptions, e.g., test setup
        One of the hardest things to do
    After spending a lot of time in one class (like Game) to “switch mental model” to focus just on Player
        Leads to wrong assumptions
Learnings
    Refactor This is context-sensitive: depends on where your caret is
    Ctrl+Shift+F7: Highlight usages (at caret)
        Try it out on different things!

Retrospective: Ensemble #36 (Fri November 26, 2021)
---------------------------------------------------
Thoughts, Observations
    That was unsatisfying. (but necessary). Discovered we needed something else to be done first.
        We learned something, but didn’t finish any functionality. +1
    Spike showed us that there was something missing before we could continue — unexpected. We didn’t learn what we thought we would.
    Experiment by breaking things and trying to fix them. And learned things.
    Understanding how “deep” the test should be asserting (e.g., we don’t care about individual cards, just that they have 2 cards). What might break?
    Lost focus on UI, but it’s necessary
    Instead of fighting the iterator, initialized it later in the process
    Should initial deal be part of constructor?
        Is Game truly in a valid state prior to initialDeal()?
    Even when experimenting, paying attention to WHY tests are failing can show missing functionality, or change thought process.
Learnings
    Collection.removeIf() !
    Let IntelliJ teach (or surprise) you
    Preview implementation Opt-Space /  Ctrl-Shift-I
    Yes, you can inline library code
    Show only failing tests by unchecking “Show Passed” in run tests toolbar
    Surround With: Cmd+Opt+T / Ctrl+Alt+T
        Just templates: Cmd+Opt+J / Ctrl+Alt+J

Retrospective: Ensemble #35 (Sat November 20, 2021)
---------------------------------------------------
Thoughts, Observations
    Look at code before prediction — passed when prediction was fail
    Determining whether/how a player was done based on the “reason done” String, instead of another abstraction (enum, or state)
    Saturday “morning” seems to be much rougher than Friday morning +3
    Confusion around renaming of methods in the SingleStubDeckFactory to clarify dealer options +1
        Before it didn’t matter, now it matters
        Good job looking at usages
    Still some language issues around terminology of “completed” “active” etc.
        Can’t really look to the “problem domain” for terminology
    Like that we’re refactoring and experimenting ways to improve the ‘playerStateChanged’
        Experimenting without fear
    Raised level of abstraction for asserting dealer took (or did not take) their turn
Learnings
    Code Folding - Collapse/Expand shortcuts (Cmd+Shift+Plus/Minus) +1
    Cmd+F12  (Ctrl+F12) show file structure as a popup
        Cmd+7 (Alt+7) for the Structure tool window
Next Time
    Call for a Huddle when struggling too long
    Scan the code and mission before the mob
        but don’t become wedded to your ideas
    Ted drive while ensemble experiments
    Assertion stuff
        Test data builders
        AssertJ custom domain-specific assertions
        Static Dealer assertion class

Retrospective: Ensemble #34 (Fri November 12, 2021)
---------------------------------------------------
Thoughts, Observations
    Easy stuff at start was nice
    Fun!
    Good discussion clarifying language (active -> standing player) to evolve +1
    Decks are getting confusing to build - time for Test Data Builder
Learnings
    Refactoring to “put condition inside method” via Extract + Inline + Rename +1
    CamelHumps setting in IntelliJ IDEA +1
    Ctrl+D (Cmd+D) duplicate line or selection
    OpenRewrite for offline refactoring +1
Next Time
    Keep test window closed when all tests pass

Retrospective: Ensemble #33 (Fri November 5, 2021)
--------------------------------------------------
Thoughts, Observations
    Like how we focused on Precisely Predicting how tests should fail, helps ensure understanding of code
    Liked coming to a new way of indicating which tests to run: “All” for All Units tests and “Unit Tests” for just unit tests
    Happy we’re exploring alternative ways to solve problems (e.g., non-recursive approach)
    Why do we dislike recursion??
        Can be harder to reason about
        Method might be a bit long to be recursion
    Liked the suggestion to review Retro goals
    Reducing verbose test method names, especially dropping where the name came from the test class name
        Sometimes think at higher-level/more abstract
Learnings
    Concept of “argue in/with code”
    Shortcut: Shift + ESC to close Active Tool Window
Next Time
    Use either “All” or “Just Unit”
    Review Retro goals
        Collect from the past
    Think about updating your tools: Git, IntelliJ, mob(maybe)

Retrospective: Ensemble #32 (Fri October 29, 2021)
--------------------------------------------------
Next Time
    Everyone turn on Presentation Assistant to show shortcuts
    Driver doesn't run tests until prediction is made:
        Only when writing test for new behavior that we expect to fail:
            predict precisely why it will fail.
    Ensemble doesn't let drivers run away
Thoughts, Observations
    Word of the day: Snoop
    Nooooooo
        breadcrumbs
    Disorienting after missing a couple of weeks, took a bit to regain context
    We're guessing too much instead of just looking at the code +1
    Didn't make test fail before it passed — never saw it fail
    Liked staying more in the Domain, understanding it better/deeply, and flowed better because of that
    Not enough prediction
    Notice where tests are no longer readable in isolation and fix them
        e.g., CsvGameRepositoryTest
    Move test methods around as we notice them
    Less “pressure” to reorganize/evolve tests vs. evolving prod code
Learnings
    Filter to show only broken tests +1
    Presentation Assistant installation/config on Windows

Retrospective: Ensemble #31 (Fri October 22, 2021)
--------------------------------------------------
Thoughts, Observations
    Ubiquitous language morphing — making it reflected in the code
    Good Domain discussions
    Found a bug relating to Dealer when running the app!
    Stepping out of the “inner” TDD loop and going out to see does it work from the “outside”
    Hands-up reminder
    Dying of curiosity why it's currently broken!
    Refactoring focus makes me happy!
    Running the app!
    Look at details/cause of failing tests instead of assuming the reason due to the most recent code change
        Led us to an experiment that broke things worse
    Liked getting rid of getCurrentPlayer()
        Nice that we needed only the ID and allowed us to get rid of the evil getter
Learnings
    Refactoring to move code from a test into the Domain
    Shift-Enter immediately opens file on the right split
Next Time
    TRY not to jump to conclusions as to why the tests failed leading jumping to a solution that's wrong

Retrospective: Ensemble #30 (Fri October 15, 2021)
--------------------------------------------------
Thoughts/Observations
    Absolutely fascinating!
        All the tests passed, even though the code seems weird that it should work
            Seems like there's less code than there should be??
        We now have code that is not necessarily understandable — tunnel vision
    Tests pass, but code is a bit misleading, time to refactor
    Someone is always noticing issues, e.g., unintended change
        Navigator doesn't always notice things, but others noticed
    Mixed feelings about the mob correcting (jumping in) vs. letting the Navigator complete their idea
    Missed working with folks
        Working together really well
    TDD can end up with working code that may not be easy to understand
    Tests are cheap!
        Run them more
    Discussions around unexpected test failures
    Testing from a distance vs. testing closer to the Domain
        Easier to determine what's going on
    Starting with asserts might have been useful — getting confused with incorrect assertions
    Too many constructors in Game
        Not an immediate pain point
    Interesting experience holding back vs. saying something
    Understand for EVERY failing test, truly why did it fail
        Too easy to assume that it was due to the change made and was intentional, instead of an accidental change
    Test naming, if you're stuck, use Given, When, Then to clarify
    Heuristic: Predict if new test is expected to Fail, otherwise just run the dang tests (as experiment)
    Run unit tests all the time, no need to run just a single test
Next Time
    Let's try: instead of interrupting/pointing out things, let's use Zoom's “raise hand”, or just physically raise your finger (i.e., non-vocal)

Retrospective: Ensemble #29 (Fri October 8, 2021)
-------------------------------------------------
Thoughts & Observations
    We were flexible with the next step as things present themselves, e.g., let's go create the Multi-player stub deck now (instead of later or never)
    Nice to go into Huddle to confirm next step (e.g., tiny step)
    Tiny step of changing internal code before changing public interface
        +1
    Being explicit about values chosen for constants to ensure tests fail for the right reason
    Adding toString() to make the test failures easier to read
    Adding equals() and hashCode() for the new value object to make it pass
    Added a fail() that was added at the end of a turn to leave a breadcrumb
        Especially useful if there's an actual break (lunch, end of day, etc.)
    Explore your intuition: even if it seems wrong, there's likely something there that's important
    If you expect a test to fail and it doesn't, dig deep
    Writing a test that's expected to pass, but not sure of the correct string (Characterization)
    Noticed the redundant/useless words in names because of the context (e.g., MultiPlayerStubDeckFactory)
    Fun day!
        Bad “dad” jokes

Retrospective: Ensemble #28 (Fri September 24, 2021)
----------------------------------------------------
Learnings
    Close all other tabs in pane
        If you like it, assign a keymap shortcut
    Focusing on smaller steps, towards the unknown parts
Thoughts, Observations
    Noting down tasks, where we've left off, etc., so we can easily pick up for next time — Breadcrumbs
    Like driving feature from outside-in, especially using Strings for event instead of Enums
        Strings makes it easier to move forward and gets us to green quickly
    Very Small Steps moving from test to test
    Everyone's noticing and fixing little "annoyances"
    Drivers are anticipating what the navigator needs
    Concerned about not really driving from front-end/outside
        Maybe driving by tests from Controller (or Service)
    Not enough considering refactoring when we're at “green”
    Learning to better deal with uncertainty
        Trusting that we'll (or I'll) figure it out
        Better going with the flow of the group
    Creating separate test classes for the “Event” aspects of Game
    “Feel” of the smaller ensemble - more focused, a little less opportunity for “stepping back”
    Felt "smooth"
    Switch focus to Player for generating the “reason done” once we had clarity around requirements for it
        +1
    Was quick to get started in the group, instead of overthinking
    Spent a fair bit of time up-front orienting towards what we'd work on

Retrospective: Ensemble #27 (Fri September 17, 2021)
----------------------------------------------------
Observations, Thoughts
    Used iterator for the first time!
    Parallel refactoring to stay in the green as long as possible
    Tried several things: moving conditions around, renaming, until we got to a good place
        +1
    Spent time on coming up with good names for methods
        +1
        Tried out different names, experimenting, looking for “better” (not perfect)
    Took the time to refactor
    Code is now more “scannable” (understandable at a glance)
        Just trying it to see, and then maybe undo it if not happy with it
    Ensemble stretched the limits
        Lada went “over time” to complete the “thought”
        Group “barged in” to work on improving name
            Make it more explicit that we were “huddling” on the name
            Ask permission
    Liked the “Spike” of copying the method to try something different and compare/contrast
    Driver sketching in comments what navigator was saying to not lose train of thought
        +1
    Instead of moving forward while “in the red”, we pushed toward getting back to green — which turned out to be easier than expected
Learnings
    Learned about Iterator
    “Early Return” vs. “Guard Clause”
        Guard Clause: aka “Fail and Bail”
    IntelliJ IDEA invert condition: select the expression then context action
    If you're stuck, go sleep
        Or take a walk
Next Time
    Upgrade mob.sh

Retrospective: Ensemble #26 (Sat September 11, 2021)
----------------------------------------------------
Observations, Thoughts
    Very interesting refactoring ++
    Interesting moment of a huge refactoring, driving it from TDD
        Huge change in behavior
        Chip away at broken tests one at a time
        Back-and-forth helped improve understanding of the problem
    “Argue over code that exists” vs. idea for code
    Noticed Ubiquitous Language coming up, and can change over time
        Single player vs. multi-player
        Game over vs. players done
    Extract Boolean Expression to Query Method
    Watching the video of Blackjack game being played helped understand the rules
    Confidence in tests as code grows
        “Downside of having good tests”
    “Zoom out” and step back and think about the Domain instead of focusing solely on the code
    Continuity of mob team is really valuable
    Changing Behavior means TESTS WILL FAIL (and that's OK)
        Be more clear about why a test failed
    Consulting with the mob (“Huddle”) really helps
Learnings
    RED tests are not BAD, only unexplained or bad tests
Next Time
    Get rid of extra windows (e.g., run/test window) unless needed
        Navigator needs to drive closing the window if any failing tests
    Watch the Blackjack multi-hand video to see different scenarios

Retrospective: Ensemble #25 (Fri September 3, 2021)
---------------------------------------------------
Observations/Thoughts
    Seeing small steps: what are we testing and how to observe?
    Current design supports adding the new features
    Felt like we were all on the same page, flowing well
    Wondered if deleting a line was a good idea?
        Experiments are good!
    Noticed code smell of growing number of Game constructors for tests
    Noticed naming drift of existing code, e.g., StubDeck, elsewhere
    Using the GameMonitor in a test (in a Mockist manner) to see end of game behavior
    More noticing of process or naming from the crowd
    Getting better at predicting before running tests
Learnings
    How to change Zoom background
    Encapsulate Field refactoring
Next Time
    Play a few games of Blackjack if you've never played
        You will be tested


Retrospective: Mob #24 (Fri August 27, 2021)
--------------------------------------------
Learnings
    throw UnsupportedOperationException as a breadcrumb
    DB entity ID vs. Domain ID
    [Select None] button on the Generate Constructor dialog creates a no-arg constructor
Observations
    Might not be calling “huddle” often enough and perhaps going off track
    Brain dead
    I'm tired
        +1
    Thinking out loud might be confusing driver, might want to call “huddle”; when stuck
    Naming tests is hard
        Hard to figure out exactly and precisely what we want to do
            How do we know it did it (Observation)
        Quality of test name affects thinking - more important that quality of code method names
    Driver anticipated next need
    When Ted was navigating got through a lot of stuff
    Doing Ensembles is what convinced me that Ensembles is a good way to develop
    Eliminate randomness from tests to prevent future flakiness
    Tidy up tests to refine setup
Next Time
    Call for huddle if you (anyone) is not sure what we're doing
    “Thinking out loud”
    Format tests to make Given/When/Then sections clear
    If you're in the crowd (not navigating nor driving), and you see us going off-process (not doing TDD, ambiguous test names, etc.), you are encouraged to speak up.


Retrospective: Mob #23 (Fri August 20, 2021)
--------------------------------------------
Observations
    Fewer huddles than normal
    Deal to multiple players worked quickly
    Was very fun
    More cohesive discussions on the fly
    Seeing and discussing different approaches
    Thinking about assert-first
    Keeping good encapsulation in mind (it's not just private fields)
    Keeping in the green, despite that it's non-trivial work (to add multiple players)
        Feature flag?
    That moment when people saw “playerStateChanged”
Learnings
    Gutter Green rollback section
    Adding @Deprecated upon method creation ROCKS
        Indicate we don't like this method, but it's needed for now
        Named it as a getter to not even pretend it's good
    collection.for postfix autocompletion for a "for" loop
    Extracting in AssertJ
Next Time
Links
    Feature Flags
        LaunchDarkly (commercial)
        Togglz (Open Source)
        Evan's presentation: https://docs.google.com/presentation/d/17RHe9lfqF2Gh6xi5ffpIn6qAaQ1iMARHLVxYI6jTa5U/edit#slide=id.p
        Split.io (commercial)


Retrospective: Mob #22 (Fri August 13, 2021)
--------------------------------------------
Observations/Thoughts
    Pause and precise predictions: not just pass/fail, but exactly why it will fail
    Thinking about edge cases
    Constants can be useful for getting first test to pass
    Feeling more comfortable being part of the "crowd"
    Look at the Project structure for files instead of trying to figure it out from memory
    Don't try and perfect the design before coding
    Keep looking from the outside-in: how does information come into the system
    The ideal path is a straight line, but it's never straight in reality: what's the next smallest step you can take in that direction
        Sometimes you don't know enough to do a Prepare Refactoring
Learnings
    "You are allowed to break tests when introducing new/changed behavior" (in fact that's the only way to do it)
    Try not to think too far ahead and not rush into new features
    Slow down and think a little bit
Appreciations
    Liked standardizing on Test on Left-Pane and Code on Right-Pane
Next Time
    Use CamelCase names when searching for classes, e.g., "G S T" for GameServiceTest, (also "GaSeT")
        Cmd + L (Ctrl + G) go to Line number
    Incoming driver ensures that the last driver completes ‘mob next'
    Precise Predictions before running tests


Retrospective: Mob #21 (Fri August 6, 2021)
-------------------------------------------
Observations/Thoughts
    Unclear what the new feature was, could have used a list of tasks to do
    Didn't note in the Mission what we had decided to do
    We're smarter together
    Experiment: delete and see if tests still pass
    Seeing the fuzzy big picture turn into small steps
    Good catch to "prepare" refactor first to List of Player before needing to change behavior
Next Time
    Once tests run and PASS, close the test-run tool window to declutter the screen


Retrospective: Mob #20 (Fri July 30, 2021)
------------------------------------------

Next Time
    Run tests more often
        +100
    Driver can prompt "run test?"
Learnings
    For "Move Method", helps to parameterize method
    Inline Method is so useful! (and inline parameter, too)
    Thinking about responsibilities
        And point of view of objects (e.g., Player)
Observations
    This week felt easier: responsibilities between classes getting clearer
    Noticing a tendency to "simulate" the real world vs. good object domain model
    Liked high-level instructions and (as driver) asking for more details as needed
        +1
    Seemed focused on doing stuff
    Completed a lot of tasks
    Did some meaningful refactorings
    Didn't have to touch any tests!
    Rushed into next thing instead of doing some tidying up refactoring
        Take more time to think (re-think) names as they're moved or their responsibilities changed
    Sometimes go too quickly past the refactoring dialogs (e.g., replace all occurrences, or field vs. param)
    Running experiments - because tests are so cheap to run
        Make a change and run tests
Appreciations
    Good discussion/question around passing "card" or "deck" to player for "hit()"

Retrospective: Mob #19 (Fri July 23, 2021)
------------------------------------------

Learnings
    Felt strongly about one approach, but let the team go with a different approach
        Not natural for most people
    Thinking about behavior
    Alt+F12 (Option-F12) for Terminal
    Alas no way to delegate into an existing class
Thoughts, Observations
    Overthinking things: try and fail (or succeed) instead
        Stop reasoning/analyzing
    Switched from TDDing the playerTest to moving behavior
        Perhaps got sidetracked by moving isDone() to Player
    Making lots of decisions as a team, don't see how this could parallelized (separate people working on this)
    Might have been "butting in" too much, rather than being asked
    Interesting refactoring that led to exposing Feature Envy
    Struggled more than usual
    Commit to a direction, even if it turns out not to be workable, so everyone can learn
        +1
    It looked so simple to just move a field! (It's not)
    When we changed code to move player is done to Player (with isDone), felt too big of a step and doing two things at once
    Stop thinking, start coding
Appreciations
    Appreciated tidying up the playerDone field no longer needed
    Appreciated the huddles and help
    Course-correction on TDD
Next Time
    Browse the code a bit before the mob to reload the context


Retrospective: Mob #18 (Fri July 16, 2021)
------------------------------------------

Learnings, Thoughts, Observations
    Player class is better than anything I write — good names for methods
    Switching to the "command & query" mindset really is useful, not just a naming thing
    Commit-before-spike (experiment)
    Nice to see introduce new constructor refactoring
    Useful huddle to clarify things
    Reinforced not changing production code without failing test
    More interesting with the "higher-level" mission of moving to multiple Players
        Feels like we're learning a lot more
    Seeing everyone learning
    Can be hard to switch from "refactoring mode" to "writing new code" via writing tests
    As a mob we bring out "the best" in each other
    Like split screen fluency
        Appreciated!
    Deleting code!
    Renaming as a first step towards larger moves
    More thoughtful about goals (why?)
Appreciations
    Ted's video was really helpful
    Appreciate paying attention to code style (spacing, etc.)
    Ted's facilitation
Questions
    Should we shift to more high-level (abstract) instructions from the Navigator
        High-level is harder to think about
        Gives the driver more agency and might make it easier for them to take over when they become Navigator
        Might benefit the entire mob
Next Time
    Navigate at High-level first, only if needed navigate with lower level instructions
    Unfold code: remind before next mob
    Running test: clarify All, Integration, or Unit
    Use "Right" and "Left" when the window is split
    Editor Tabs on when split screen

Retrospective: Mob #17 (Fri July 9, 2021)
-----------------------------------------

Learnings, Thoughts
    Refactoring replacing implementation with a duplicate by comparing old vs. new in a test
        (Characterization-test like)
        Very useful when code can be hard to characterize ("legacy code")
    Overall group participation high
        good cohesion
    Inline just one usage to prepare for move
    Feeling like delivering code is important — self-imposed — slow down, check assumptions
    Like shortcuts being pushed on me
    AssertJ isEqualByComparingFieldByField was uses
        Also see usingRecursiveComparison
    Convert for loop to stream using IntelliJ IDEA's magic
For Next Time
    More like today


Retrospective: Mob #16 (Fri July 2, 2021)
-----------------------------------------

Thoughts, Learnings, etc.
    Ted's double-extract-method refactoring golf technique
    See the different approaches to refactoring during huddle
    Reminders about smaller steps and testing
    Manoj called huddle when needed
    Have a more explicit higher level goal
    Interesting contrast to a non-test situation
    Great discussion about encapsulation issue of cards and hand with respect to Player
    Don't forget to clean up the "trail" of changes left after chains of refactorings (e.g., method names)
    Pre-mob huddle and ad-hoc huddles to help clarify goals
    Feels like double-hop refactoring might be too much (other easier ways)
Next Time
    Navigator start with higher-level instructions rather than starting with details
        Trying to find balance between providing shortcuts and higher-level instructions
    Learn shortcuts
        Discuss for next time: push onto driver or let driver ask or let Navigator/Driver negotiate


Retrospective: Mob #15 (Fri June 25, 2021)
------------------------------------------
Learned
    Refresher for automated refactoring tools, understanding of purpose of moving — move to the right place, introduce params
    Took a complex task and broke it down into small actions
    Introduce parameter before moving method over to new class
    Extract Delegate
    Starting at the Domain very different approach than starting from the UI
    Nice to have review of Command & Query core definition
    Try the unfamiliar and maybe it's useful and will become familiar
    Cheat sheet!
        Practice what's there
        Be aware of what you're doing "manually", and try and remember to use the shortcut
        Maybe make your own?
Liked
    Picked a good task to work on
    Compound Refactorings
    Prepare refactor for new feature as a preliminary step
Next Time
    UNfold Code

Retrospective: Mob #14 (Fri June 18, 2021)
------------------------------------------
	Observations/Thoughts
		Felt lost the entire time, trouble finding our path
		Liked when Evan called for a huddle
		Less guessing and hoping
		Guessing really bugged me
		Liked when Bini reminded us to Predict before test running
		Being lost is uncomfortable, getting better at being lost in public
		Learned how to test-drive the new CSV repository and then just plugged it in and everything worked
		When tests failed after injecting, felt we weren't on the same page as to why they were failing — get together and understand why.
		Uncomfortable when doing some things that were not test-driven (when injecting and passing down thru call stack the new CSV repository)
		Hadn't run the Game in a long time! And it JUST WORKED.
		Got caught up in trying too hard to clarify test code

		Error stack trace: look at it
		Don't guess, look.
		Don't assume, look.
		Don't serialize through the screen — in the mob, you can be independent for a bit and come back to the mob with answers (diverge/converge)
		Forgot to run tests at the beginning
		Running not quite the right test as asked
		Time flew by!
		Feature is complete!
	Next Time
		Encourage people to ask for a huddle when lost +++
		Use more shortcuts!
		Use the time of handoff to evaluate whether what we're doing is worth it (e.g., clarifying code)
		Do independent "research" when in the crowd/mob.
		Turn off code folding


Retrospective: Mob #13 (Fri June 11, 2021)
------------------------------------------
	Learning/Takeaway
		Characterization test, to test the hypothesis that multiple games were on a single line, turned out not to be the case, disproving the hypothesis
			Characterization test vs. switching to debugger, staying in the work flow (+1)
		Consequences of moving test setup code to a "setup" method vs. a named method call in the test method
			Tradeoffs
		ZOMBIES in action, picking the right tests to move from zero, to one, and then to many
		Failed test to green by just hard-coding the correct answer in the code
		JUnit 5 @TempDir
	Observations
		Shorter huddles/hand-offs — doing the work, less "where are we" and coordination
			More "in sync", flow
		Be aware of specifying the Class name and the file number when multiple panes are open
		More focus on small steps, e.g., hard-coding
		Less "runaway driver" problem
			Learning from past experiences
		Navigator asking for help and mob swarmed for the answer
		More of the mob involved with "navigating", worked more closely together
		Stayed in the green (and noticed when in the red too long)
	Do or Not Do Next Time?
		More discussion? Asking "why are we doing this?" or "is there a better way to do that?"
		Need to be reminded of shortcuts for refactoring

Retrospective: Mob #12 (Sun June 6, 2021)
-----------------------------------------
	Observations
		Appreciated that Lada never hesitated to delete (redundant) code
		Driver careful/aware not run away from the Navigator
		Liked Ted checking on huddle being clear on what's happening and on the same page
		Started writing integration test that could have been unit test first
		Helpful to define carefully the behavior that's being tested before writing the test
		Bini great at providing feedback as Driver to clarify what Navigator was requesting
		Being mindful of what we're testing: what to keep, what to get rid of
		Question: how do we know when to take a step back?
		Noticed occasionally ‘mob start', but liked people confirming that it was done
		Mob is flowing much better: handoffs, etc.
	Next Time
		Technical "spike tests" are OK
		Try: Ted push shortcuts on Driver?
		Make sure the test behavior being tested is crystal clear, naming the method following Given/When/Then can help
		Keep ZOMBIES in mind
		Ted: Make sure to announce Driver & Navigator
		Keep Driver/Navigator order

Retrospective: Mob #11 (Fri June 4, 2021)
-----------------------------------------
	Observations
		In the red a lot less often than previous sessions
		Could have been in the red a lot less for Enum->String
		Predicting more than in the past
		Liked the new order of Driver-Navigator, handoff/transition seemed easier to continue (+2)
		Discussion around options for converting Enum to String, Coupling came up as a factor
			Helped to understand tradeoffs of options
		Refactoring test code is also important (+2)
			Refactoring to separate method felt like moving towards logic in test
		More conscious of smaller steps
		Detour into ParameterizedTest, which was a big step, led to refactoring to a method instead
		Discussion of test driving the very obvious implementation, vs. not test-driving at all and just finish implementation
			Driving the code vs. leaving regression tests behind
	Next Time
		Keep
			Driver + Navigator order & terminology
		Drop
			Don't push shortcuts on Driver unless asked
		Add
			Driver: Feel free to ask for shortcut
		Awareness
			How long in the red
			Size of steps
			Code being written without tests
			Precision Predictions


Retrospective: Mob #10 (Fri May 28, 2021)
-----------------------------------------
	Observations
		Code driving instead of test driving new code
		Typist thinking out loud
		Typist didn't do what the Navigator asked, and the Navigator didn't correct
			Typists not always asking clarifying questions
		Code formatting
			Lines are too long when window is split into two panes
				Avoid horizontally
		Tendency to run individual tests rather than all Unit Test
		Setup for stub decks is pretty verbose
		Good call for Mike to call a Huddle (when doing two things at once: format of GameOutcome and the result itself)
		Navigator burden held too heavily, could ask for guidance more often
		Take smaller steps
		Disabled test hung around for too long
		Avoid duplication of tests
		Transitions were a bit rough
	Suggestions
		Group mode was unclear: make more clear "Navigator is driving/thinking" vs. "Group huddling and discussing"
		Clarify Typist role: carries out Navigator's instructions/requests
			Typist can ask questions (say "I noticed this test is empty, should I delete?")
		Run All Unit Tests
			When to run All-All tests (incl. integration)
		Navigator: when handing off, explicitly state intent to next navigator: where we are and where we're going
			Call for Huddle if needed
	Like/Dislike
		Liked when team went into "huddle" mode to discuss and clarify intent
		Like: Ask Mob for help
		fail() breadcrumb
		Hard-coding to get test to pass
		Empty test was deleted

Retrospective: Mob #9 (Sat May 22, 2021)
----------------------------------------
(After 1 round)
* Need to work more on agreeing what the intent
* Fuzzy about where to go next
    * Discuss about where we're going
* Ask for a time-out to plan
* Red for 3 rotations, try to get to green faster
* Will try practicing with smaller steps

(After end)
* Best one overall
* Copying deck might have been too big of a step
* High tolerance for annoyances
* Delaying refactoring (including renames)
* Desire to get functionality implemented vs. tidying
* Make sure the error cause is clear before trying to fix
* Good use of shortcuts and asking about shortcuts

Next Time:
+ Mind map for retro next time
+ Game-plan huddle before starting (max 5m)
+ Call for huddle at any time (when lost, confused)
+ Hands/Eyes/Brain/Nose
    -> https://github.com/willemlarsen/mobprogrammingrpg
+ 90m-1h45m - hard stop at 1h45

Retrospective: Mob #8 (Fri May 21, 2021)
----------------------------------------

* More clarity of direction
* Liked retro in the middle (+1)
* Micro-test, focused on smaller classes
* Taking smaller steps
    * Create more, smaller classes
* Hard to remember in the "heat of the moment"
* Driving everything from the test
* Listen to that voice that says "is this becoming an integration test?"
* Notes in chat (+1)
* Don't be afraid to undo/throw away work <-- this is hard
* Shortcut of the day? Continue, maybe 2
* Try out T&C||R next time?
* Keep code & tests Tidy
* Test isolation: be able to understand without looking elsewhere
